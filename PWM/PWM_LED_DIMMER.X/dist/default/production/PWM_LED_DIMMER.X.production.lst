

Microchip MPLAB XC8 Assembler V3.00 build 20241204225717 
                                                                                               Mon Apr 14 15:58:13 2025

Microchip MPLAB XC8 C Compiler v3.00 (Free license) build 20241204225717 Og1 
     1                           	processor	16F877
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     5                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
     7                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
     8                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
     9                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2
    10                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2
    11                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    12                           	dabs	1,0x7E,2
    13     0000                     
    14                           ; Generated 12/10/2023 GMT
    15                           ; 
    16                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    17                           ; All rights reserved.
    18                           ; 
    19                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    20                           ; 
    21                           ; Redistribution and use in source and binary forms, with or without modification, are
    22                           ; permitted provided that the following conditions are met:
    23                           ; 
    24                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    25                           ;        conditions and the following disclaimer.
    26                           ; 
    27                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    28                           ;        of conditions and the following disclaimer in the documentation and/or other
    29                           ;        materials provided with the distribution. Publication is not required when
    30                           ;        this file is used in an embedded application.
    31                           ; 
    32                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    33                           ;        software without specific prior written permission.
    34                           ; 
    35                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    36                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    37                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    38                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    39                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    40                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    41                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    42                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    43                           ; 
    44                           ; 
    45                           ; Code-generator required, PIC16F877 Definitions
    46                           ; 
    47                           ; SFR Addresses
    48     0004                     fsr             equ	4
    49     0004                     fsr0            equ	4
    50     0000                     indf            equ	0
    51     0000                     indf0           equ	0
    52     0002                     pc              equ	2
    53     0002                     pcl             equ	2
    54     000A                     pclath          equ	10
    55     0003                     status          equ	3
    56     0000                     INDF            equ	0	;# 
    57     0001                     TMR0            equ	1	;# 
    58     0002                     PCL             equ	2	;# 
    59     0003                     STATUS          equ	3	;# 
    60     0004                     FSR             equ	4	;# 
    61     0005                     PORTA           equ	5	;# 
    62     0006                     PORTB           equ	6	;# 
    63     0007                     PORTC           equ	7	;# 
    64     0008                     PORTD           equ	8	;# 
    65     0009                     PORTE           equ	9	;# 
    66     000A                     PCLATH          equ	10	;# 
    67     000B                     INTCON          equ	11	;# 
    68     000C                     PIR1            equ	12	;# 
    69     000D                     PIR2            equ	13	;# 
    70     000E                     TMR1            equ	14	;# 
    71     000E                     TMR1L           equ	14	;# 
    72     000F                     TMR1H           equ	15	;# 
    73     0010                     T1CON           equ	16	;# 
    74     0011                     TMR2            equ	17	;# 
    75     0012                     T2CON           equ	18	;# 
    76     0013                     SSPBUF          equ	19	;# 
    77     0014                     SSPCON          equ	20	;# 
    78     0015                     CCPR1           equ	21	;# 
    79     0015                     CCPR1L          equ	21	;# 
    80     0016                     CCPR1H          equ	22	;# 
    81     0017                     CCP1CON         equ	23	;# 
    82     0018                     RCSTA           equ	24	;# 
    83     0019                     TXREG           equ	25	;# 
    84     001A                     RCREG           equ	26	;# 
    85     001B                     CCPR2           equ	27	;# 
    86     001B                     CCPR2L          equ	27	;# 
    87     001C                     CCPR2H          equ	28	;# 
    88     001D                     CCP2CON         equ	29	;# 
    89     001E                     ADRESH          equ	30	;# 
    90     001F                     ADCON0          equ	31	;# 
    91     0081                     OPTION_REG      equ	129	;# 
    92     0085                     TRISA           equ	133	;# 
    93     0086                     TRISB           equ	134	;# 
    94     0087                     TRISC           equ	135	;# 
    95     0088                     TRISD           equ	136	;# 
    96     0089                     TRISE           equ	137	;# 
    97     008C                     PIE1            equ	140	;# 
    98     008D                     PIE2            equ	141	;# 
    99     008E                     PCON            equ	142	;# 
   100     0091                     SSPCON2         equ	145	;# 
   101     0092                     PR2             equ	146	;# 
   102     0093                     SSPADD          equ	147	;# 
   103     0094                     SSPSTAT         equ	148	;# 
   104     0098                     TXSTA           equ	152	;# 
   105     0099                     SPBRG           equ	153	;# 
   106     009E                     ADRESL          equ	158	;# 
   107     009F                     ADCON1          equ	159	;# 
   108     010C                     EEDATA          equ	268	;# 
   109     010D                     EEADR           equ	269	;# 
   110     010E                     EEDATH          equ	270	;# 
   111     010F                     EEADRH          equ	271	;# 
   112     018C                     EECON1          equ	396	;# 
   113     018D                     EECON2          equ	397	;# 
   114     0000                     INDF            equ	0	;# 
   115     0001                     TMR0            equ	1	;# 
   116     0002                     PCL             equ	2	;# 
   117     0003                     STATUS          equ	3	;# 
   118     0004                     FSR             equ	4	;# 
   119     0005                     PORTA           equ	5	;# 
   120     0006                     PORTB           equ	6	;# 
   121     0007                     PORTC           equ	7	;# 
   122     0008                     PORTD           equ	8	;# 
   123     0009                     PORTE           equ	9	;# 
   124     000A                     PCLATH          equ	10	;# 
   125     000B                     INTCON          equ	11	;# 
   126     000C                     PIR1            equ	12	;# 
   127     000D                     PIR2            equ	13	;# 
   128     000E                     TMR1            equ	14	;# 
   129     000E                     TMR1L           equ	14	;# 
   130     000F                     TMR1H           equ	15	;# 
   131     0010                     T1CON           equ	16	;# 
   132     0011                     TMR2            equ	17	;# 
   133     0012                     T2CON           equ	18	;# 
   134     0013                     SSPBUF          equ	19	;# 
   135     0014                     SSPCON          equ	20	;# 
   136     0015                     CCPR1           equ	21	;# 
   137     0015                     CCPR1L          equ	21	;# 
   138     0016                     CCPR1H          equ	22	;# 
   139     0017                     CCP1CON         equ	23	;# 
   140     0018                     RCSTA           equ	24	;# 
   141     0019                     TXREG           equ	25	;# 
   142     001A                     RCREG           equ	26	;# 
   143     001B                     CCPR2           equ	27	;# 
   144     001B                     CCPR2L          equ	27	;# 
   145     001C                     CCPR2H          equ	28	;# 
   146     001D                     CCP2CON         equ	29	;# 
   147     001E                     ADRESH          equ	30	;# 
   148     001F                     ADCON0          equ	31	;# 
   149     0081                     OPTION_REG      equ	129	;# 
   150     0085                     TRISA           equ	133	;# 
   151     0086                     TRISB           equ	134	;# 
   152     0087                     TRISC           equ	135	;# 
   153     0088                     TRISD           equ	136	;# 
   154     0089                     TRISE           equ	137	;# 
   155     008C                     PIE1            equ	140	;# 
   156     008D                     PIE2            equ	141	;# 
   157     008E                     PCON            equ	142	;# 
   158     0091                     SSPCON2         equ	145	;# 
   159     0092                     PR2             equ	146	;# 
   160     0093                     SSPADD          equ	147	;# 
   161     0094                     SSPSTAT         equ	148	;# 
   162     0098                     TXSTA           equ	152	;# 
   163     0099                     SPBRG           equ	153	;# 
   164     009E                     ADRESL          equ	158	;# 
   165     009F                     ADCON1          equ	159	;# 
   166     010C                     EEDATA          equ	268	;# 
   167     010D                     EEADR           equ	269	;# 
   168     010E                     EEDATH          equ	270	;# 
   169     010F                     EEADRH          equ	271	;# 
   170     018C                     EECON1          equ	396	;# 
   171     018D                     EECON2          equ	397	;# 
   172     0015                     _CCPR1L         set	21
   173     0012                     _T2CONbits      set	18
   174     0017                     _CCP1CONbits    set	23
   175     0092                     _PR2            set	146
   176     0087                     _TRISCbits      set	135
   177                           
   178                           	psect	cinit
   179     07FC                     start_initialization:	
   180                           ; #config settings
   181                           
   182     07FC                     __initialization:
   183     07FC                     end_of_initialization:	
   184                           ;End of C runtime variable initialization code
   185                           
   186     07FC                     __end_of__initialization:
   187     07FC  0183               	clrf	3
   188     07FD  120A  118A  2F94   	ljmp	_main	;jump to C main() function
   189                           
   190                           	psect	cstackCOMMON
   191     0070                     __pcstackCOMMON:
   192     0070                     ?_CCP_Init:
   193     0070                     ?_Set_PR2:	
   194                           ; 1 bytes @ 0x0
   195                           
   196     0070                     ?_TMR2_Init:	
   197                           ; 1 bytes @ 0x0
   198                           
   199     0070                     ?_PWM_Set_Duty_Cycle:	
   200                           ; 1 bytes @ 0x0
   201                           
   202     0070                     ?_main:	
   203                           ; 1 bytes @ 0x0
   204                           
   205     0070                     PWM_Set_Duty_Cycle@dc:	
   206                           ; 2 bytes @ 0x0
   207                           
   208     0070                     ??_CCP_Init:	
   209                           ; 2 bytes @ 0x0
   210                           
   211     0070                     ??_Set_PR2:	
   212                           ; 1 bytes @ 0x0
   213                           
   214     0070                     ??_TMR2_Init:	
   215                           ; 1 bytes @ 0x0
   216                           
   217                           
   218                           ; 1 bytes @ 0x0
   219     0070                     	ds	2
   220     0072                     ??_PWM_Set_Duty_Cycle:
   221                           
   222                           ; 1 bytes @ 0x2
   223     0072                     	ds	2
   224     0074                     ??_main:
   225                           
   226                           ; 1 bytes @ 0x4
   227     0074                     	ds	2
   228     0076                     main@dc:
   229                           
   230                           ; 2 bytes @ 0x6
   231     0076                     	ds	2
   232                           
   233                           	psect	maintext
   234     0794                     __pmaintext:	
   235 ;;
   236 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   237 ;;
   238 ;; *************** function _main *****************
   239 ;; Defined at:
   240 ;;		line 30 in file "main.c"
   241 ;; Parameters:    Size  Location     Type
   242 ;;		None
   243 ;; Auto vars:     Size  Location     Type
   244 ;;  dc              2    6[COMMON] unsigned short 
   245 ;; Return value:  Size  Location     Type
   246 ;;                  2   24[None  ] int 
   247 ;; Registers used:
   248 ;;		wreg, status,2, status,0, pclath, cstack
   249 ;; Tracked objects:
   250 ;;		On entry : B00/0
   251 ;;		On exit  : 0/0
   252 ;;		Unchanged: 0/0
   253 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   254 ;;      Params:         0       0       0       0       0
   255 ;;      Locals:         2       0       0       0       0
   256 ;;      Temps:          2       0       0       0       0
   257 ;;      Totals:         4       0       0       0       0
   258 ;;Total ram usage:        4 bytes
   259 ;; Hardware stack levels required when called: 1
   260 ;; This function calls:
   261 ;;		_CCP_Init
   262 ;;		_PWM_Set_Duty_Cycle
   263 ;;		_Set_PR2
   264 ;;		_TMR2_Init
   265 ;; This function is called by:
   266 ;;		Startup code after reset
   267 ;; This function uses a non-reentrant model
   268 ;;
   269                           
   270     0794                     _main:	
   271                           ;psect for function _main
   272                           
   273     0794                     l631:	
   274                           ;incstack = 0
   275                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   276                           
   277                           
   278                           ;main.c: 31:     CCP_Init();
   279     0794  120A  118A  2761  120A  118A  	fcall	_CCP_Init
   280                           
   281                           ;main.c: 32:     Set_PR2();
   282     0799  120A  118A  2756  120A  118A  	fcall	_Set_PR2
   283                           
   284                           ;main.c: 33:     TMR2_Init();
   285     079E  120A  118A  275B  120A  118A  	fcall	_TMR2_Init
   286     07A3                     l633:
   287     07A3                     l635:
   288                           
   289                           ;main.c: 37:     {;main.c: 38:         dc = 0;
   290     07A3  01F6               	clrf	main@dc
   291     07A4  01F7               	clrf	main@dc+1
   292                           
   293                           ;main.c: 39:         while (dc < 500)
   294     07A5  2FBE               	goto	l643
   295     07A6                     l637:
   296                           
   297                           ;main.c: 40:         {;main.c: 41:             PWM_Set_Duty_Cycle(dc);
   298     07A6  0877               	movf	main@dc+1,w
   299     07A7  00F1               	movwf	PWM_Set_Duty_Cycle@dc+1
   300     07A8  0876               	movf	main@dc,w
   301     07A9  00F0               	movwf	PWM_Set_Duty_Cycle@dc
   302     07AA  120A  118A  2769  120A  118A  	fcall	_PWM_Set_Duty_Cycle
   303     07AF                     l639:
   304                           
   305                           ;main.c: 42:             dc++;
   306     07AF  3001               	movlw	1
   307     07B0  07F6               	addwf	main@dc,f
   308     07B1  1803               	skipnc
   309     07B2  0AF7               	incf	main@dc+1,f
   310     07B3  3000               	movlw	0
   311     07B4  07F7               	addwf	main@dc+1,f
   312     07B5                     l641:
   313                           
   314                           ;main.c: 43:             _delay((unsigned long)((2)*(4000000/4000.0)));
   315     07B5  3003               	movlw	3
   316     07B6  00F5               	movwf	??_main+1
   317     07B7  3097               	movlw	151
   318     07B8  00F4               	movwf	??_main
   319     07B9                     u77:
   320     07B9  0BF4               	decfsz	??_main,f
   321     07BA  2FB9               	goto	u77
   322     07BB  0BF5               	decfsz	??_main+1,f
   323     07BC  2FB9               	goto	u77
   324     07BD  2FBE               	nop2
   325     07BE                     l643:
   326                           
   327                           ;main.c: 39:         while (dc < 500)
   328     07BE  3001               	movlw	1
   329     07BF  0277               	subwf	main@dc+1,w
   330     07C0  30F4               	movlw	244
   331     07C1  1903               	skipnz
   332     07C2  0276               	subwf	main@dc,w
   333     07C3  1C03               	skipc
   334     07C4  2FC6               	goto	u51
   335     07C5  2FC7               	goto	u50
   336     07C6                     u51:
   337     07C6  2FA6               	goto	l637
   338     07C7                     u50:
   339     07C7                     l645:
   340                           
   341                           ;main.c: 45:         _delay((unsigned long)((100)*(4000000/4000.0)));
   342     07C7  3082               	movlw	130
   343     07C8  00F5               	movwf	??_main+1
   344     07C9  30DD               	movlw	221
   345     07CA  00F4               	movwf	??_main
   346     07CB                     u87:
   347     07CB  0BF4               	decfsz	??_main,f
   348     07CC  2FCB               	goto	u87
   349     07CD  0BF5               	decfsz	??_main+1,f
   350     07CE  2FCB               	goto	u87
   351     07CF  2FD0               	nop2
   352                           
   353                           ;main.c: 46:         while (dc > 0)
   354     07D0  2FE9               	goto	l653
   355     07D1                     l647:
   356                           
   357                           ;main.c: 47:         {;main.c: 48:             PWM_Set_Duty_Cycle(dc);
   358     07D1  0877               	movf	main@dc+1,w
   359     07D2  00F1               	movwf	PWM_Set_Duty_Cycle@dc+1
   360     07D3  0876               	movf	main@dc,w
   361     07D4  00F0               	movwf	PWM_Set_Duty_Cycle@dc
   362     07D5  120A  118A  2769  120A  118A  	fcall	_PWM_Set_Duty_Cycle
   363     07DA                     l649:
   364                           
   365                           ;main.c: 49:             dc--;
   366     07DA  3001               	movlw	1
   367     07DB  02F6               	subwf	main@dc,f
   368     07DC  3000               	movlw	0
   369     07DD  1C03               	skipc
   370     07DE  03F7               	decf	main@dc+1,f
   371     07DF  02F7               	subwf	main@dc+1,f
   372     07E0                     l651:
   373                           
   374                           ;main.c: 50:             _delay((unsigned long)((2)*(4000000/4000.0)));
   375     07E0  3003               	movlw	3
   376     07E1  00F5               	movwf	??_main+1
   377     07E2  3097               	movlw	151
   378     07E3  00F4               	movwf	??_main
   379     07E4                     u97:
   380     07E4  0BF4               	decfsz	??_main,f
   381     07E5  2FE4               	goto	u97
   382     07E6  0BF5               	decfsz	??_main+1,f
   383     07E7  2FE4               	goto	u97
   384     07E8  2FE9               	nop2
   385     07E9                     l653:
   386                           
   387                           ;main.c: 46:         while (dc > 0)
   388     07E9  0876               	movf	main@dc,w
   389     07EA  0477               	iorwf	main@dc+1,w
   390     07EB  1D03               	btfss	3,2
   391     07EC  2FEE               	goto	u61
   392     07ED  2FEF               	goto	u60
   393     07EE                     u61:
   394     07EE  2FD1               	goto	l647
   395     07EF                     u60:
   396     07EF                     l655:
   397                           
   398                           ;main.c: 52:         _delay((unsigned long)((100)*(4000000/4000.0)));
   399     07EF  3082               	movlw	130
   400     07F0  00F5               	movwf	??_main+1
   401     07F1  30DD               	movlw	221
   402     07F2  00F4               	movwf	??_main
   403     07F3                     u107:
   404     07F3  0BF4               	decfsz	??_main,f
   405     07F4  2FF3               	goto	u107
   406     07F5  0BF5               	decfsz	??_main+1,f
   407     07F6  2FF3               	goto	u107
   408     07F7  2FF8               	nop2
   409     07F8  2FA3               	goto	l635
   410     07F9  120A  118A  2800   	ljmp	start
   411     07FC                     __end_of_main:
   412                           
   413                           	psect	text1
   414     075B                     __ptext1:	
   415 ;; *************** function _TMR2_Init *****************
   416 ;; Defined at:
   417 ;;		line 70 in file "main.c"
   418 ;; Parameters:    Size  Location     Type
   419 ;;		None
   420 ;; Auto vars:     Size  Location     Type
   421 ;;		None
   422 ;; Return value:  Size  Location     Type
   423 ;;                  1    wreg      void 
   424 ;; Registers used:
   425 ;;		None
   426 ;; Tracked objects:
   427 ;;		On entry : 0/0
   428 ;;		On exit  : 0/0
   429 ;;		Unchanged: 0/0
   430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   431 ;;      Params:         0       0       0       0       0
   432 ;;      Locals:         0       0       0       0       0
   433 ;;      Temps:          0       0       0       0       0
   434 ;;      Totals:         0       0       0       0       0
   435 ;;Total ram usage:        0 bytes
   436 ;; Hardware stack levels used: 1
   437 ;; This function calls:
   438 ;;		Nothing
   439 ;; This function is called by:
   440 ;;		_main
   441 ;; This function uses a non-reentrant model
   442 ;;
   443                           
   444     075B                     _TMR2_Init:	
   445                           ;psect for function _TMR2_Init
   446                           
   447     075B                     l595:	
   448                           ;incstack = 0
   449                           ; Regs used in _TMR2_Init: []
   450                           
   451                           
   452                           ;main.c: 72:     T2CONbits.T2CKPS0 = 1;
   453     075B  1283               	bcf	3,5	;RP0=0, select bank0
   454     075C  1303               	bcf	3,6	;RP1=0, select bank0
   455     075D  1412               	bsf	18,0	;volatile
   456                           
   457                           ;main.c: 73:     T2CONbits.T2CKPS1 = 0;
   458     075E  1092               	bcf	18,1	;volatile
   459                           
   460                           ;main.c: 74:     T2CONbits.TMR2ON = 1;
   461     075F  1512               	bsf	18,2	;volatile
   462     0760                     l43:
   463     0760  0008               	return
   464     0761                     __end_of_TMR2_Init:
   465                           
   466                           	psect	text2
   467     0756                     __ptext2:	
   468 ;; *************** function _Set_PR2 *****************
   469 ;; Defined at:
   470 ;;		line 66 in file "main.c"
   471 ;; Parameters:    Size  Location     Type
   472 ;;		None
   473 ;; Auto vars:     Size  Location     Type
   474 ;;		None
   475 ;; Return value:  Size  Location     Type
   476 ;;                  1    wreg      void 
   477 ;; Registers used:
   478 ;;		None
   479 ;; Tracked objects:
   480 ;;		On entry : 0/0
   481 ;;		On exit  : 0/0
   482 ;;		Unchanged: 0/0
   483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   484 ;;      Params:         0       0       0       0       0
   485 ;;      Locals:         0       0       0       0       0
   486 ;;      Temps:          0       0       0       0       0
   487 ;;      Totals:         0       0       0       0       0
   488 ;;Total ram usage:        0 bytes
   489 ;; Hardware stack levels used: 1
   490 ;; This function calls:
   491 ;;		Nothing
   492 ;; This function is called by:
   493 ;;		_main
   494 ;; This function uses a non-reentrant model
   495 ;;
   496                           
   497     0756                     _Set_PR2:	
   498                           ;psect for function _Set_PR2
   499                           
   500     0756                     l593:	
   501                           ;incstack = 0
   502                           ; Regs used in _Set_PR2: []
   503                           
   504                           
   505                           ;main.c: 68:     PR2 = 124;
   506     0756  307C               	movlw	124
   507     0757  1683               	bsf	3,5	;RP0=1, select bank1
   508     0758  1303               	bcf	3,6	;RP1=0, select bank1
   509     0759  0092               	movwf	18	;volatile
   510     075A                     l40:
   511     075A  0008               	return
   512     075B                     __end_of_Set_PR2:
   513                           
   514                           	psect	text3
   515     0769                     __ptext3:	
   516 ;; *************** function _PWM_Set_Duty_Cycle *****************
   517 ;; Defined at:
   518 ;;		line 77 in file "main.c"
   519 ;; Parameters:    Size  Location     Type
   520 ;;  dc              2    0[COMMON] unsigned short 
   521 ;; Auto vars:     Size  Location     Type
   522 ;;		None
   523 ;; Return value:  Size  Location     Type
   524 ;;                  1    wreg      void 
   525 ;; Registers used:
   526 ;;		wreg, status,2, status,0
   527 ;; Tracked objects:
   528 ;;		On entry : 0/0
   529 ;;		On exit  : 0/0
   530 ;;		Unchanged: 0/0
   531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   532 ;;      Params:         2       0       0       0       0
   533 ;;      Locals:         0       0       0       0       0
   534 ;;      Temps:          2       0       0       0       0
   535 ;;      Totals:         4       0       0       0       0
   536 ;;Total ram usage:        4 bytes
   537 ;; Hardware stack levels used: 1
   538 ;; This function calls:
   539 ;;		Nothing
   540 ;; This function is called by:
   541 ;;		_main
   542 ;; This function uses a non-reentrant model
   543 ;;
   544                           
   545     0769                     _PWM_Set_Duty_Cycle:	
   546                           ;psect for function _PWM_Set_Duty_Cycle
   547                           
   548     0769                     l627:	
   549                           ;incstack = 0
   550                           ; Regs used in _PWM_Set_Duty_Cycle: [wreg+status,2+status,0]
   551                           
   552                           
   553                           ;main.c: 77: void PWM_Set_Duty_Cycle(uint16_t dc);main.c: 78: {;main.c: 79:     if (dc <
      +                           1024)
   554     0769  3004               	movlw	4
   555     076A  0271               	subwf	PWM_Set_Duty_Cycle@dc+1,w
   556     076B  3000               	movlw	0
   557     076C  1903               	skipnz
   558     076D  0270               	subwf	PWM_Set_Duty_Cycle@dc,w
   559     076E  1803               	skipnc
   560     076F  2F71               	goto	u41
   561     0770  2F72               	goto	u40
   562     0771                     u41:
   563     0771  2F93               	goto	l47
   564     0772                     u40:
   565     0772                     l629:
   566                           
   567                           ;main.c: 80:     {;main.c: 81:         CCP1CONbits.CCP1Y = dc & 1;
   568     0772  0870               	movf	PWM_Set_Duty_Cycle@dc,w
   569     0773  3901               	andlw	1
   570     0774  00F2               	movwf	??_PWM_Set_Duty_Cycle
   571     0775  0EF2               	swapf	??_PWM_Set_Duty_Cycle,f
   572     0776  1283               	bcf	3,5	;RP0=0, select bank0
   573     0777  1303               	bcf	3,6	;RP1=0, select bank0
   574     0778  0817               	movf	23,w	;volatile
   575     0779  0672               	xorwf	??_PWM_Set_Duty_Cycle,w
   576     077A  39EF               	andlw	-17
   577     077B  0672               	xorwf	??_PWM_Set_Duty_Cycle,w
   578     077C  0097               	movwf	23	;volatile
   579                           
   580                           ;main.c: 82:         CCP1CONbits.CCP1X = dc & 2;
   581     077D  0870               	movf	PWM_Set_Duty_Cycle@dc,w
   582     077E  3902               	andlw	2
   583     077F  00F2               	movwf	??_PWM_Set_Duty_Cycle
   584     0780  0EF2               	swapf	??_PWM_Set_Duty_Cycle,f
   585     0781  0DF2               	rlf	??_PWM_Set_Duty_Cycle,f
   586     0782  0817               	movf	23,w	;volatile
   587     0783  0672               	xorwf	??_PWM_Set_Duty_Cycle,w
   588     0784  39DF               	andlw	-33
   589     0785  0672               	xorwf	??_PWM_Set_Duty_Cycle,w
   590     0786  0097               	movwf	23	;volatile
   591                           
   592                           ;main.c: 83:         CCPR1L = dc >> 2;
   593     0787  0871               	movf	PWM_Set_Duty_Cycle@dc+1,w
   594     0788  00F3               	movwf	??_PWM_Set_Duty_Cycle+1
   595     0789  0870               	movf	PWM_Set_Duty_Cycle@dc,w
   596     078A  00F2               	movwf	??_PWM_Set_Duty_Cycle
   597     078B  1003               	clrc
   598     078C  0CF3               	rrf	??_PWM_Set_Duty_Cycle+1,f
   599     078D  0CF2               	rrf	??_PWM_Set_Duty_Cycle,f
   600     078E  1003               	clrc
   601     078F  0CF3               	rrf	??_PWM_Set_Duty_Cycle+1,f
   602     0790  0CF2               	rrf	??_PWM_Set_Duty_Cycle,f
   603     0791  0872               	movf	??_PWM_Set_Duty_Cycle,w
   604     0792  0095               	movwf	21	;volatile
   605     0793                     l47:
   606     0793  0008               	return
   607     0794                     __end_of_PWM_Set_Duty_Cycle:
   608                           
   609                           	psect	text4
   610     0761                     __ptext4:	
   611 ;; *************** function _CCP_Init *****************
   612 ;; Defined at:
   613 ;;		line 59 in file "main.c"
   614 ;; Parameters:    Size  Location     Type
   615 ;;		None
   616 ;; Auto vars:     Size  Location     Type
   617 ;;		None
   618 ;; Return value:  Size  Location     Type
   619 ;;                  1    wreg      void 
   620 ;; Registers used:
   621 ;;		None
   622 ;; Tracked objects:
   623 ;;		On entry : 0/0
   624 ;;		On exit  : 0/0
   625 ;;		Unchanged: 0/0
   626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   627 ;;      Params:         0       0       0       0       0
   628 ;;      Locals:         0       0       0       0       0
   629 ;;      Temps:          0       0       0       0       0
   630 ;;      Totals:         0       0       0       0       0
   631 ;;Total ram usage:        0 bytes
   632 ;; Hardware stack levels used: 1
   633 ;; This function calls:
   634 ;;		Nothing
   635 ;; This function is called by:
   636 ;;		_main
   637 ;; This function uses a non-reentrant model
   638 ;;
   639                           
   640     0761                     _CCP_Init:	
   641                           ;psect for function _CCP_Init
   642                           
   643     0761                     l591:	
   644                           ;incstack = 0
   645                           ; Regs used in _CCP_Init: []
   646                           
   647                           
   648                           ;main.c: 61:     CCP1CONbits.CCP1M3 = 1;
   649     0761  1283               	bcf	3,5	;RP0=0, select bank0
   650     0762  1303               	bcf	3,6	;RP1=0, select bank0
   651     0763  1597               	bsf	23,3	;volatile
   652                           
   653                           ;main.c: 62:     CCP1CONbits.CCP1M2 = 1;
   654     0764  1517               	bsf	23,2	;volatile
   655                           
   656                           ;main.c: 63:     TRISCbits.TRISC2 = 0;
   657     0765  1683               	bsf	3,5	;RP0=1, select bank1
   658     0766  1303               	bcf	3,6	;RP1=0, select bank1
   659     0767  1107               	bcf	7,2	;volatile
   660     0768                     l37:
   661     0768  0008               	return
   662     0769                     __end_of_CCP_Init:
   663     0002                     ___latbits      equ	2
   664     007E                     btemp           set	126	;btemp
   665     007E                     wtemp0          set	126
   666                           
   667                           	psect	config
   668                           
   669                           ;Config register CONFIG @ 0x2007
   670                           ;	Oscillator Selection bits
   671                           ;	FOSC = HS, HS oscillator
   672                           ;	Watchdog Timer Enable bit
   673                           ;	WDTE = OFF, WDT disabled
   674                           ;	Power-up Timer Enable bit
   675                           ;	PWRTE = ON, PWRT enabled
   676                           ;	FLASH Program Memory Code Protection bits
   677                           ;	CP = OFF, Code protection off
   678                           ;	Brown-out Reset Enable bit
   679                           ;	BOREN = ON, BOR enabled
   680                           ;	Low Voltage In-Circuit Serial Programming Enable bit
   681                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
   682                           ;	Data EE Memory Code Protection
   683                           ;	CPD = OFF, Code Protection off
   684                           ;	FLASH Program Memory Write Enable
   685                           ;	WRT = ON, Unprotected program memory may be written to by EECON control
   686                           ;	In-Circuit Debugger Mode bit
   687                           ;	DEBUG = 0x1, unprogrammed default
   688     2007                     	org	8199
   689     2007  3F72               	dw	16242

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8       8
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_PWM_Set_Duty_Cycle

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0     182
                                              4 COMMON     4     4      0
                           _CCP_Init
                 _PWM_Set_Duty_Cycle
                            _Set_PR2
                          _TMR2_Init
 ---------------------------------------------------------------------------------
 (1) _TMR2_Init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Set_PR2                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM_Set_Duty_Cycle                                   4     2      2      90
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _CCP_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CCP_Init
   _PWM_Set_Duty_Cycle
   _Set_PR2
   _TMR2_Init

Address spaces:
Name               Size   Autos  Total    Usage
BITCOMMON           14      0       0      0.0%
BITBANK0            80      0       0      0.0%
BITBANK1            80      0       0      0.0%
BITBANK3            96      0       0      0.0%
BITBANK2            96      0       0      0.0%
COMMON              14      8       8     57.1%
BANK0               80      0       0      0.0%
BANK1               80      0       0      0.0%
BANK3               96      0       0      0.0%
BANK2               96      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0       8      0.0%


Microchip Technology PIC Macro Assembler V3.00 build 20241204225717 
Symbol Table                                                                                   Mon Apr 14 15:58:13 2025

                        l40 075A                          l43 0760                          l37 0768  
                        l47 0793                          u40 0772                          u41 0771  
                        u50 07C7                          u51 07C6                          u60 07EF  
                        u61 07EE                          u77 07B9                          u87 07CB  
                        u97 07E4                         l631 0794                         l641 07B5  
                       l633 07A3                         l627 0769                         l651 07E0  
                       l643 07BE                         l635 07A3                         l629 0772  
                       l653 07E9                         l645 07C7                         l637 07A6  
                       l591 0761                         l655 07EF                         l647 07D1  
                       l639 07AF                         l593 0756                         l649 07DA  
                       l595 075B                         u107 07F3                         _PR2 0092  
                      _main 0794                        btemp 007E                        start 0000  
          __end_of_CCP_Init 0769             __end_of_Set_PR2 075B                       ?_main 0070  
                     status 0003                       wtemp0 007E             __initialization 07FC  
              __end_of_main 07FC                      ??_main 0074                      _CCPR1L 0015  
                 ??_Set_PR2 0070           __end_of_TMR2_Init 0761                      main@dc 0076  
                 ?_CCP_Init 0070     __end_of__initialization 07FC              __pcstackCOMMON 0070  
                ??_CCP_Init 0070                  __pmaintext 0794                     _Set_PR2 0756  
                   __ptext1 075B                     __ptext2 0756                     __ptext3 0769  
                   __ptext4 0761                   _T2CONbits 0012        end_of_initialization 07FC  
                 _TMR2_Init 075B        PWM_Set_Duty_Cycle@dc 0070                   _TRISCbits 0087  
               _CCP1CONbits 0017                  ?_TMR2_Init 0070         start_initialization 07FC  
__end_of_PWM_Set_Duty_Cycle 0794                   ___latbits 0002                    ?_Set_PR2 0070  
               ??_TMR2_Init 0070                    _CCP_Init 0761          _PWM_Set_Duty_Cycle 0769  
       ?_PWM_Set_Duty_Cycle 0070        ??_PWM_Set_Duty_Cycle 0072  
