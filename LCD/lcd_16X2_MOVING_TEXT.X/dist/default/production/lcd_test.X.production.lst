

Microchip MPLAB XC8 Assembler V3.00 build 20241204225717 
                                                                                               Fri Mar 21 23:45:14 2025

Microchip MPLAB XC8 C Compiler v3.00 (Free license) build 20241204225717 Og1 
     1                           	processor	16F877
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,space=0,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
     8                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
     9                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    10                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2
    11                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2
    12                           	psect	text5,local,class=CODE,space=0,merge=1,delta=2
    13                           	psect	text6,local,class=CODE,space=0,merge=1,delta=2
    14                           	psect	text7,local,class=CODE,space=0,merge=1,delta=2
    15                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    16                           	dabs	1,0x7E,2
    17     0000                     
    18                           ; Generated 12/10/2023 GMT
    19                           ; 
    20                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    21                           ; All rights reserved.
    22                           ; 
    23                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    24                           ; 
    25                           ; Redistribution and use in source and binary forms, with or without modification, are
    26                           ; permitted provided that the following conditions are met:
    27                           ; 
    28                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    29                           ;        conditions and the following disclaimer.
    30                           ; 
    31                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    32                           ;        of conditions and the following disclaimer in the documentation and/or other
    33                           ;        materials provided with the distribution. Publication is not required when
    34                           ;        this file is used in an embedded application.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC16F877 Definitions
    50                           ; 
    51                           ; SFR Addresses
    52     0004                     fsr             equ	4
    53     0004                     fsr0            equ	4
    54     0000                     indf            equ	0
    55     0000                     indf0           equ	0
    56     0002                     pc              equ	2
    57     0002                     pcl             equ	2
    58     000A                     pclath          equ	10
    59     0003                     status          equ	3
    60     0000                     INDF            equ	0	;# 
    61     0001                     TMR0            equ	1	;# 
    62     0002                     PCL             equ	2	;# 
    63     0003                     STATUS          equ	3	;# 
    64     0004                     FSR             equ	4	;# 
    65     0005                     PORTA           equ	5	;# 
    66     0006                     PORTB           equ	6	;# 
    67     0007                     PORTC           equ	7	;# 
    68     0008                     PORTD           equ	8	;# 
    69     0009                     PORTE           equ	9	;# 
    70     000A                     PCLATH          equ	10	;# 
    71     000B                     INTCON          equ	11	;# 
    72     000C                     PIR1            equ	12	;# 
    73     000D                     PIR2            equ	13	;# 
    74     000E                     TMR1            equ	14	;# 
    75     000E                     TMR1L           equ	14	;# 
    76     000F                     TMR1H           equ	15	;# 
    77     0010                     T1CON           equ	16	;# 
    78     0011                     TMR2            equ	17	;# 
    79     0012                     T2CON           equ	18	;# 
    80     0013                     SSPBUF          equ	19	;# 
    81     0014                     SSPCON          equ	20	;# 
    82     0015                     CCPR1           equ	21	;# 
    83     0015                     CCPR1L          equ	21	;# 
    84     0016                     CCPR1H          equ	22	;# 
    85     0017                     CCP1CON         equ	23	;# 
    86     0018                     RCSTA           equ	24	;# 
    87     0019                     TXREG           equ	25	;# 
    88     001A                     RCREG           equ	26	;# 
    89     001B                     CCPR2           equ	27	;# 
    90     001B                     CCPR2L          equ	27	;# 
    91     001C                     CCPR2H          equ	28	;# 
    92     001D                     CCP2CON         equ	29	;# 
    93     001E                     ADRESH          equ	30	;# 
    94     001F                     ADCON0          equ	31	;# 
    95     0081                     OPTION_REG      equ	129	;# 
    96     0085                     TRISA           equ	133	;# 
    97     0086                     TRISB           equ	134	;# 
    98     0087                     TRISC           equ	135	;# 
    99     0088                     TRISD           equ	136	;# 
   100     0089                     TRISE           equ	137	;# 
   101     008C                     PIE1            equ	140	;# 
   102     008D                     PIE2            equ	141	;# 
   103     008E                     PCON            equ	142	;# 
   104     0091                     SSPCON2         equ	145	;# 
   105     0092                     PR2             equ	146	;# 
   106     0093                     SSPADD          equ	147	;# 
   107     0094                     SSPSTAT         equ	148	;# 
   108     0098                     TXSTA           equ	152	;# 
   109     0099                     SPBRG           equ	153	;# 
   110     009E                     ADRESL          equ	158	;# 
   111     009F                     ADCON1          equ	159	;# 
   112     010C                     EEDATA          equ	268	;# 
   113     010D                     EEADR           equ	269	;# 
   114     010E                     EEDATH          equ	270	;# 
   115     010F                     EEADRH          equ	271	;# 
   116     018C                     EECON1          equ	396	;# 
   117     018D                     EECON2          equ	397	;# 
   118     0000                     INDF            equ	0	;# 
   119     0001                     TMR0            equ	1	;# 
   120     0002                     PCL             equ	2	;# 
   121     0003                     STATUS          equ	3	;# 
   122     0004                     FSR             equ	4	;# 
   123     0005                     PORTA           equ	5	;# 
   124     0006                     PORTB           equ	6	;# 
   125     0007                     PORTC           equ	7	;# 
   126     0008                     PORTD           equ	8	;# 
   127     0009                     PORTE           equ	9	;# 
   128     000A                     PCLATH          equ	10	;# 
   129     000B                     INTCON          equ	11	;# 
   130     000C                     PIR1            equ	12	;# 
   131     000D                     PIR2            equ	13	;# 
   132     000E                     TMR1            equ	14	;# 
   133     000E                     TMR1L           equ	14	;# 
   134     000F                     TMR1H           equ	15	;# 
   135     0010                     T1CON           equ	16	;# 
   136     0011                     TMR2            equ	17	;# 
   137     0012                     T2CON           equ	18	;# 
   138     0013                     SSPBUF          equ	19	;# 
   139     0014                     SSPCON          equ	20	;# 
   140     0015                     CCPR1           equ	21	;# 
   141     0015                     CCPR1L          equ	21	;# 
   142     0016                     CCPR1H          equ	22	;# 
   143     0017                     CCP1CON         equ	23	;# 
   144     0018                     RCSTA           equ	24	;# 
   145     0019                     TXREG           equ	25	;# 
   146     001A                     RCREG           equ	26	;# 
   147     001B                     CCPR2           equ	27	;# 
   148     001B                     CCPR2L          equ	27	;# 
   149     001C                     CCPR2H          equ	28	;# 
   150     001D                     CCP2CON         equ	29	;# 
   151     001E                     ADRESH          equ	30	;# 
   152     001F                     ADCON0          equ	31	;# 
   153     0081                     OPTION_REG      equ	129	;# 
   154     0085                     TRISA           equ	133	;# 
   155     0086                     TRISB           equ	134	;# 
   156     0087                     TRISC           equ	135	;# 
   157     0088                     TRISD           equ	136	;# 
   158     0089                     TRISE           equ	137	;# 
   159     008C                     PIE1            equ	140	;# 
   160     008D                     PIE2            equ	141	;# 
   161     008E                     PCON            equ	142	;# 
   162     0091                     SSPCON2         equ	145	;# 
   163     0092                     PR2             equ	146	;# 
   164     0093                     SSPADD          equ	147	;# 
   165     0094                     SSPSTAT         equ	148	;# 
   166     0098                     TXSTA           equ	152	;# 
   167     0099                     SPBRG           equ	153	;# 
   168     009E                     ADRESL          equ	158	;# 
   169     009F                     ADCON1          equ	159	;# 
   170     010C                     EEDATA          equ	268	;# 
   171     010D                     EEADR           equ	269	;# 
   172     010E                     EEDATH          equ	270	;# 
   173     010F                     EEADRH          equ	271	;# 
   174     018C                     EECON1          equ	396	;# 
   175     018D                     EECON2          equ	397	;# 
   176     0000                     INDF            equ	0	;# 
   177     0001                     TMR0            equ	1	;# 
   178     0002                     PCL             equ	2	;# 
   179     0003                     STATUS          equ	3	;# 
   180     0004                     FSR             equ	4	;# 
   181     0005                     PORTA           equ	5	;# 
   182     0006                     PORTB           equ	6	;# 
   183     0007                     PORTC           equ	7	;# 
   184     0008                     PORTD           equ	8	;# 
   185     0009                     PORTE           equ	9	;# 
   186     000A                     PCLATH          equ	10	;# 
   187     000B                     INTCON          equ	11	;# 
   188     000C                     PIR1            equ	12	;# 
   189     000D                     PIR2            equ	13	;# 
   190     000E                     TMR1            equ	14	;# 
   191     000E                     TMR1L           equ	14	;# 
   192     000F                     TMR1H           equ	15	;# 
   193     0010                     T1CON           equ	16	;# 
   194     0011                     TMR2            equ	17	;# 
   195     0012                     T2CON           equ	18	;# 
   196     0013                     SSPBUF          equ	19	;# 
   197     0014                     SSPCON          equ	20	;# 
   198     0015                     CCPR1           equ	21	;# 
   199     0015                     CCPR1L          equ	21	;# 
   200     0016                     CCPR1H          equ	22	;# 
   201     0017                     CCP1CON         equ	23	;# 
   202     0018                     RCSTA           equ	24	;# 
   203     0019                     TXREG           equ	25	;# 
   204     001A                     RCREG           equ	26	;# 
   205     001B                     CCPR2           equ	27	;# 
   206     001B                     CCPR2L          equ	27	;# 
   207     001C                     CCPR2H          equ	28	;# 
   208     001D                     CCP2CON         equ	29	;# 
   209     001E                     ADRESH          equ	30	;# 
   210     001F                     ADCON0          equ	31	;# 
   211     0081                     OPTION_REG      equ	129	;# 
   212     0085                     TRISA           equ	133	;# 
   213     0086                     TRISB           equ	134	;# 
   214     0087                     TRISC           equ	135	;# 
   215     0088                     TRISD           equ	136	;# 
   216     0089                     TRISE           equ	137	;# 
   217     008C                     PIE1            equ	140	;# 
   218     008D                     PIE2            equ	141	;# 
   219     008E                     PCON            equ	142	;# 
   220     0091                     SSPCON2         equ	145	;# 
   221     0092                     PR2             equ	146	;# 
   222     0093                     SSPADD          equ	147	;# 
   223     0094                     SSPSTAT         equ	148	;# 
   224     0098                     TXSTA           equ	152	;# 
   225     0099                     SPBRG           equ	153	;# 
   226     009E                     ADRESL          equ	158	;# 
   227     009F                     ADCON1          equ	159	;# 
   228     010C                     EEDATA          equ	268	;# 
   229     010D                     EEADR           equ	269	;# 
   230     010E                     EEDATH          equ	270	;# 
   231     010F                     EEADRH          equ	271	;# 
   232     018C                     EECON1          equ	396	;# 
   233     018D                     EECON2          equ	397	;# 
   234     0006                     _PORTBbits      set	6
   235     0086                     _TRISBbits      set	134
   236     0086                     _TRISB          set	134
   237                           
   238                           	psect	strings
   239     0003                     __pstrings:
   240     0003                     stringtab:
   241     0003                     __stringtab:
   242     0003                     stringcode:	
   243                           ;	String table - string pointers are 1 byte each
   244                           
   245     0003                     stringdir:
   246     0003  3000               	movlw	high stringdir
   247     0004  008A               	movwf	10
   248     0005  0804               	movf	4,w
   249     0006  0A84               	incf	4,f
   250     0007  0782               	addwf	2,f
   251     0008                     __stringbase:
   252     0008  3400               	retlw	0
   253     0009                     __end_of__stringtab:
   254     0009                     STR_1:
   255     0009  3444               	retlw	68	;'D'
   256     000A  3469               	retlw	105	;'i'
   257     000B  346E               	retlw	110	;'n'
   258     000C  3468               	retlw	104	;'h'
   259     000D  3454               	retlw	84	;'T'
   260     000E  3469               	retlw	105	;'i'
   261     000F  3465               	retlw	101	;'e'
   262     0010  346E               	retlw	110	;'n'
   263     0011  3400               	retlw	0
   264     0012                     STR_2:
   265     0012  3448               	retlw	72	;'H'
   266     0013  3443               	retlw	67	;'C'
   267     0014  344D               	retlw	77	;'M'
   268     0015  3455               	retlw	85	;'U'
   269     0016  3454               	retlw	84	;'T'
   270     0017  3400               	retlw	0
   271                           
   272                           	psect	cinit
   273     07FC                     start_initialization:	
   274                           ; #config settings
   275                           
   276     07FC                     __initialization:
   277     07FC                     end_of_initialization:	
   278                           ;End of C runtime variable initialization code
   279                           
   280     07FC                     __end_of__initialization:
   281     07FC  0183               	clrf	3
   282     07FD  120A  118A  2EC5   	ljmp	_main	;jump to C main() function
   283                           
   284                           	psect	cstackCOMMON
   285     0070                     __pcstackCOMMON:
   286     0070                     ?_LCD_Init:
   287     0070                     ?_LCD_Clear:	
   288                           ; 1 bytes @ 0x0
   289                           
   290     0070                     ?_main:	
   291                           ; 1 bytes @ 0x0
   292                           
   293     0070                     ?_LCD_DATA:	
   294                           ; 1 bytes @ 0x0
   295                           
   296     0070                     ?_LCD_CMD:	
   297                           ; 1 bytes @ 0x0
   298                           
   299     0070                     ?_LCD_Write_Char:	
   300                           ; 1 bytes @ 0x0
   301                           
   302     0070                     LCD_DATA@data:	
   303                           ; 1 bytes @ 0x0
   304                           
   305     0070                     ??_LCD_DATA:	
   306                           ; 1 bytes @ 0x0
   307                           
   308                           
   309                           ; 1 bytes @ 0x0
   310     0070                     	ds	1
   311     0071                     ??_LCD_CMD:
   312     0071                     ??_LCD_Write_Char:	
   313                           ; 1 bytes @ 0x1
   314                           
   315                           
   316                           ; 1 bytes @ 0x1
   317     0071                     	ds	2
   318     0073                     LCD_CMD@CMD:
   319     0073                     LCD_Write_Char@low4:	
   320                           ; 1 bytes @ 0x3
   321                           
   322                           
   323                           ; 1 bytes @ 0x3
   324     0073                     	ds	1
   325     0074                     ?_LCD_Set_Cursor:
   326     0074                     LCD_Write_Char@high4:	
   327                           ; 1 bytes @ 0x4
   328                           
   329     0074                     LCD_Set_Cursor@c:	
   330                           ; 1 bytes @ 0x4
   331                           
   332     0074                     ??_LCD_Init:	
   333                           ; 1 bytes @ 0x4
   334                           
   335     0074                     ??_LCD_Clear:	
   336                           ; 1 bytes @ 0x4
   337                           
   338                           
   339                           ; 1 bytes @ 0x4
   340     0074                     	ds	1
   341     0075                     LCD_Write_Char@data:
   342     0075                     ??_LCD_Set_Cursor:	
   343                           ; 1 bytes @ 0x5
   344                           
   345                           
   346                           ; 1 bytes @ 0x5
   347     0075                     	ds	1
   348     0076                     ?_LCD_Write_String:
   349     0076                     LCD_Write_String@str:	
   350                           ; 1 bytes @ 0x6
   351                           
   352     0076                     LCD_Set_Cursor@r:	
   353                           ; 1 bytes @ 0x6
   354                           
   355                           
   356                           ; 1 bytes @ 0x6
   357     0076                     	ds	1
   358     0077                     LCD_Set_Cursor@high4:
   359     0077                     LCD_Write_String@i:	
   360                           ; 1 bytes @ 0x7
   361                           
   362     0077                     ??_LCD_Write_String:	
   363                           ; 2 bytes @ 0x7
   364                           
   365                           
   366                           ; 1 bytes @ 0x7
   367     0077                     	ds	1
   368     0078                     LCD_Set_Cursor@low4:
   369                           
   370                           ; 1 bytes @ 0x8
   371     0078                     	ds	1
   372     0079                     LCD_Set_Cursor@temp:
   373                           
   374                           ; 1 bytes @ 0x9
   375     0079                     	ds	1
   376     007A                     ??_main:
   377                           
   378                           	psect	maintext
   379     06C5                     __pmaintext:	
   380                           ; 1 bytes @ 0xA
   381 ;;
   382 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   383 ;;
   384 ;; *************** function _main *****************
   385 ;; Defined at:
   386 ;;		line 13 in file "main.c"
   387 ;; Parameters:    Size  Location     Type
   388 ;;		None
   389 ;; Auto vars:     Size  Location     Type
   390 ;;		None
   391 ;; Return value:  Size  Location     Type
   392 ;;                  1    wreg      void 
   393 ;; Registers used:
   394 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   395 ;; Tracked objects:
   396 ;;		On entry : B00/0
   397 ;;		On exit  : 0/0
   398 ;;		Unchanged: 0/0
   399 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   400 ;;      Params:         0       0       0       0       0
   401 ;;      Locals:         0       0       0       0       0
   402 ;;      Temps:          0       0       0       0       0
   403 ;;      Totals:         0       0       0       0       0
   404 ;;Total ram usage:        0 bytes
   405 ;; Hardware stack levels required when called: 3
   406 ;; This function calls:
   407 ;;		_LCD_Clear
   408 ;;		_LCD_Init
   409 ;;		_LCD_Set_Cursor
   410 ;;		_LCD_Write_String
   411 ;; This function is called by:
   412 ;;		Startup code after reset
   413 ;; This function uses a non-reentrant model
   414 ;;
   415                           
   416     06C5                     _main:	
   417                           ;psect for function _main
   418                           
   419     06C5                     l774:	
   420                           ;incstack = 0
   421                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   422                           
   423                           
   424                           ;main.c: 15:     LCD_Init();
   425     06C5  120A  118A  2789  120A  118A  	fcall	_LCD_Init
   426                           
   427                           ;main.c: 16:     LCD_Clear();
   428     06CA  120A  118A  264F  120A  118A  	fcall	_LCD_Clear
   429                           
   430                           ;main.c: 17:     LCD_Set_Cursor(1,5);
   431     06CF  3005               	movlw	5
   432     06D0  00F4               	movwf	LCD_Set_Cursor@c
   433     06D1  3001               	movlw	1
   434     06D2  120A  118A  26F1  120A  118A  	fcall	_LCD_Set_Cursor
   435     06D7                     l776:
   436                           
   437                           ;main.c: 18:     LCD_Write_String("DinhTien");
   438     06D7  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   439     06D8  00F6               	movwf	LCD_Write_String@str
   440     06D9  120A  118A  26A1  120A  118A  	fcall	_LCD_Write_String
   441     06DE                     l778:
   442                           
   443                           ;main.c: 19:     LCD_Set_Cursor(2,7);
   444     06DE  3007               	movlw	7
   445     06DF  00F4               	movwf	LCD_Set_Cursor@c
   446     06E0  3002               	movlw	2
   447     06E1  120A  118A  26F1  120A  118A  	fcall	_LCD_Set_Cursor
   448                           
   449                           ;main.c: 20:     LCD_Write_String("HCMUT");
   450     06E6  300A               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   451     06E7  00F6               	movwf	LCD_Write_String@str
   452     06E8  120A  118A  26A1  120A  118A  	fcall	_LCD_Write_String
   453     06ED                     l13:	
   454                           ;main.c: 22:     while(1)
   455                           
   456     06ED                     l14:	
   457                           ;main.c: 23:     {;main.c: 25:     }
   458                           
   459     06ED  2EED               	goto	l13
   460     06EE  120A  118A  2800   	ljmp	start
   461     06F1                     __end_of_main:
   462                           
   463                           	psect	text1
   464     06A1                     __ptext1:	
   465 ;; *************** function _LCD_Write_String *****************
   466 ;; Defined at:
   467 ;;		line 101 in file "lcd.c"
   468 ;; Parameters:    Size  Location     Type
   469 ;;  str             1    6[COMMON] PTR unsigned char 
   470 ;;		 -> STR_2(6), STR_1(9), 
   471 ;; Auto vars:     Size  Location     Type
   472 ;;  i               2    7[COMMON] unsigned int 
   473 ;; Return value:  Size  Location     Type
   474 ;;                  1    wreg      void 
   475 ;; Registers used:
   476 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   477 ;; Tracked objects:
   478 ;;		On entry : 0/0
   479 ;;		On exit  : 0/0
   480 ;;		Unchanged: 0/0
   481 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   482 ;;      Params:         1       0       0       0       0
   483 ;;      Locals:         2       0       0       0       0
   484 ;;      Temps:          0       0       0       0       0
   485 ;;      Totals:         3       0       0       0       0
   486 ;;Total ram usage:        3 bytes
   487 ;; Hardware stack levels used: 1
   488 ;; Hardware stack levels required when called: 2
   489 ;; This function calls:
   490 ;;		_LCD_Write_Char
   491 ;; This function is called by:
   492 ;;		_main
   493 ;; This function uses a non-reentrant model
   494 ;;
   495                           
   496     06A1                     _LCD_Write_String:	
   497                           ;psect for function _LCD_Write_String
   498                           
   499     06A1                     l766:	
   500                           ;incstack = 0
   501                           ; Regs used in _LCD_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   502                           
   503                           
   504                           ;lcd.c: 101: void LCD_Write_String (char*str);lcd.c: 102: {;lcd.c: 103:     unsigned int
      +                           i = 0;
   505     06A1  01F7               	clrf	LCD_Write_String@i
   506     06A2  01F8               	clrf	LCD_Write_String@i+1
   507                           
   508                           ;lcd.c: 104:     while(str[i] != '\0')
   509     06A3  2EB7               	goto	l772
   510     06A4                     l768:
   511                           
   512                           ;lcd.c: 105:     {;lcd.c: 106:         LCD_Write_Char(str[i++]);
   513     06A4  0877               	movf	LCD_Write_String@i,w
   514     06A5  0776               	addwf	LCD_Write_String@str,w
   515     06A6  0084               	movwf	4
   516     06A7  120A  118A  2003  120A  118A  	fcall	stringdir
   517     06AC  120A  118A  2738  120A  118A  	fcall	_LCD_Write_Char
   518     06B1                     l770:
   519     06B1  3001               	movlw	1
   520     06B2  07F7               	addwf	LCD_Write_String@i,f
   521     06B3  1803               	skipnc
   522     06B4  0AF8               	incf	LCD_Write_String@i+1,f
   523     06B5  3000               	movlw	0
   524     06B6  07F8               	addwf	LCD_Write_String@i+1,f
   525     06B7                     l772:
   526                           
   527                           ;lcd.c: 104:     while(str[i] != '\0')
   528     06B7  0877               	movf	LCD_Write_String@i,w
   529     06B8  0776               	addwf	LCD_Write_String@str,w
   530     06B9  0084               	movwf	4
   531     06BA  120A  118A  2003  120A  118A  	fcall	stringdir
   532     06BF  3A00               	xorlw	0
   533     06C0  1D03               	skipz
   534     06C1  2EC3               	goto	u151
   535     06C2  2EC4               	goto	u150
   536     06C3                     u151:
   537     06C3  2EA4               	goto	l768
   538     06C4                     u150:
   539     06C4                     l53:
   540     06C4  0008               	return
   541     06C5                     __end_of_LCD_Write_String:
   542                           
   543                           	psect	text2
   544     0738                     __ptext2:	
   545 ;; *************** function _LCD_Write_Char *****************
   546 ;; Defined at:
   547 ;;		line 80 in file "lcd.c"
   548 ;; Parameters:    Size  Location     Type
   549 ;;  data            1    wreg     unsigned char 
   550 ;; Auto vars:     Size  Location     Type
   551 ;;  data            1    5[COMMON] unsigned char 
   552 ;;  high4           1    4[COMMON] unsigned char 
   553 ;;  low4            1    3[COMMON] unsigned char 
   554 ;; Return value:  Size  Location     Type
   555 ;;                  1    wreg      void 
   556 ;; Registers used:
   557 ;;		wreg, status,2, status,0, pclath, cstack
   558 ;; Tracked objects:
   559 ;;		On entry : 0/0
   560 ;;		On exit  : 0/0
   561 ;;		Unchanged: 0/0
   562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   563 ;;      Params:         0       0       0       0       0
   564 ;;      Locals:         3       0       0       0       0
   565 ;;      Temps:          2       0       0       0       0
   566 ;;      Totals:         5       0       0       0       0
   567 ;;Total ram usage:        5 bytes
   568 ;; Hardware stack levels used: 1
   569 ;; Hardware stack levels required when called: 1
   570 ;; This function calls:
   571 ;;		_LCD_DATA
   572 ;; This function is called by:
   573 ;;		_LCD_Write_String
   574 ;; This function uses a non-reentrant model
   575 ;;
   576                           
   577     0738                     _LCD_Write_Char:	
   578                           ;psect for function _LCD_Write_Char
   579                           
   580                           
   581                           ;incstack = 0
   582                           ; Regs used in _LCD_Write_Char: [wreg+status,2+status,0+pclath+cstack]
   583                           ;LCD_Write_Char@data stored from wreg
   584     0738  00F5               	movwf	LCD_Write_Char@data
   585     0739                     l630:
   586                           
   587                           ;lcd.c: 80: void LCD_Write_Char(char data);lcd.c: 81: {;lcd.c: 82:     char low4, high4;
      +                          ;lcd.c: 83:     low4 = data & 0x0f;
   588     0739  0875               	movf	LCD_Write_Char@data,w
   589     073A  00F3               	movwf	LCD_Write_Char@low4
   590     073B                     l632:
   591     073B  300F               	movlw	15
   592     073C  05F3               	andwf	LCD_Write_Char@low4,f
   593     073D                     l634:
   594                           
   595                           ;lcd.c: 84:     high4 = data & 0xf0;
   596     073D  0875               	movf	LCD_Write_Char@data,w
   597     073E  00F4               	movwf	LCD_Write_Char@high4
   598     073F  30F0               	movlw	240
   599     0740  05F4               	andwf	LCD_Write_Char@high4,f
   600     0741                     l636:
   601                           
   602                           ;lcd.c: 86:     PORTBbits.RB5 = 1;
   603     0741  1283               	bcf	3,5	;RP0=0, select bank0
   604     0742  1303               	bcf	3,6	;RP1=0, select bank0
   605     0743  1686               	bsf	6,5	;volatile
   606     0744                     l638:
   607                           
   608                           ;lcd.c: 88:     LCD_DATA(high4>>4);
   609     0744  0874               	movf	LCD_Write_Char@high4,w
   610     0745  00F1               	movwf	??_LCD_Write_Char
   611     0746  3004               	movlw	4
   612     0747                     u55:
   613     0747  1003               	clrc
   614     0748  0CF1               	rrf	??_LCD_Write_Char,f
   615     0749  3EFF               	addlw	-1
   616     074A  1D03               	skipz
   617     074B  2F47               	goto	u55
   618     074C  0871               	movf	??_LCD_Write_Char,w
   619     074D  120A  118A  265C  120A  118A  	fcall	_LCD_DATA
   620     0752                     l640:
   621                           
   622                           ;lcd.c: 89:     PORTBbits.RB4 = 1;
   623     0752  1283               	bcf	3,5	;RP0=0, select bank0
   624     0753  1303               	bcf	3,6	;RP1=0, select bank0
   625     0754  1606               	bsf	6,4	;volatile
   626     0755                     l642:
   627                           
   628                           ;lcd.c: 90:     _delay((unsigned long)((500)*(20000000/4000000.0)));
   629     0755  3004               	movlw	4
   630     0756  00F2               	movwf	??_LCD_Write_Char+1
   631     0757  303D               	movlw	61
   632     0758  00F1               	movwf	??_LCD_Write_Char
   633     0759                     u167:
   634     0759  0BF1               	decfsz	??_LCD_Write_Char,f
   635     075A  2F59               	goto	u167
   636     075B  0BF2               	decfsz	??_LCD_Write_Char+1,f
   637     075C  2F59               	goto	u167
   638     075D  2F5E               	nop2
   639     075E                     l644:
   640                           
   641                           ;lcd.c: 91:     PORTBbits.RB4 = 0;
   642     075E  1283               	bcf	3,5	;RP0=0, select bank0
   643     075F  1303               	bcf	3,6	;RP1=0, select bank0
   644     0760  1206               	bcf	6,4	;volatile
   645     0761                     l646:
   646                           
   647                           ;lcd.c: 92:     _delay((unsigned long)((500)*(20000000/4000000.0)));
   648     0761  3004               	movlw	4
   649     0762  00F2               	movwf	??_LCD_Write_Char+1
   650     0763  303D               	movlw	61
   651     0764  00F1               	movwf	??_LCD_Write_Char
   652     0765                     u177:
   653     0765  0BF1               	decfsz	??_LCD_Write_Char,f
   654     0766  2F65               	goto	u177
   655     0767  0BF2               	decfsz	??_LCD_Write_Char+1,f
   656     0768  2F65               	goto	u177
   657     0769  2F6A               	nop2
   658     076A                     l648:
   659                           
   660                           ;lcd.c: 94:     LCD_DATA(low4);
   661     076A  0873               	movf	LCD_Write_Char@low4,w
   662     076B  120A  118A  265C  120A  118A  	fcall	_LCD_DATA
   663     0770                     l650:
   664                           
   665                           ;lcd.c: 95:     PORTBbits.RB4 = 1;
   666     0770  1283               	bcf	3,5	;RP0=0, select bank0
   667     0771  1303               	bcf	3,6	;RP1=0, select bank0
   668     0772  1606               	bsf	6,4	;volatile
   669     0773                     l652:
   670                           
   671                           ;lcd.c: 96:     _delay((unsigned long)((500)*(20000000/4000000.0)));
   672     0773  3004               	movlw	4
   673     0774  00F2               	movwf	??_LCD_Write_Char+1
   674     0775  303D               	movlw	61
   675     0776  00F1               	movwf	??_LCD_Write_Char
   676     0777                     u187:
   677     0777  0BF1               	decfsz	??_LCD_Write_Char,f
   678     0778  2F77               	goto	u187
   679     0779  0BF2               	decfsz	??_LCD_Write_Char+1,f
   680     077A  2F77               	goto	u187
   681     077B  2F7C               	nop2
   682     077C                     l654:
   683                           
   684                           ;lcd.c: 97:     PORTBbits.RB4 = 0;
   685     077C  1283               	bcf	3,5	;RP0=0, select bank0
   686     077D  1303               	bcf	3,6	;RP1=0, select bank0
   687     077E  1206               	bcf	6,4	;volatile
   688     077F                     l656:
   689                           
   690                           ;lcd.c: 98:     _delay((unsigned long)((500)*(20000000/4000000.0)));
   691     077F  3004               	movlw	4
   692     0780  00F2               	movwf	??_LCD_Write_Char+1
   693     0781  303D               	movlw	61
   694     0782  00F1               	movwf	??_LCD_Write_Char
   695     0783                     u197:
   696     0783  0BF1               	decfsz	??_LCD_Write_Char,f
   697     0784  2F83               	goto	u197
   698     0785  0BF2               	decfsz	??_LCD_Write_Char+1,f
   699     0786  2F83               	goto	u197
   700     0787  2F88               	nop2
   701     0788                     l47:
   702     0788  0008               	return
   703     0789                     __end_of_LCD_Write_Char:
   704                           
   705                           	psect	text3
   706     06F1                     __ptext3:	
   707 ;; *************** function _LCD_Set_Cursor *****************
   708 ;; Defined at:
   709 ;;		line 110 in file "lcd.c"
   710 ;; Parameters:    Size  Location     Type
   711 ;;  r               1    wreg     unsigned char 
   712 ;;  c               1    4[COMMON] unsigned char 
   713 ;; Auto vars:     Size  Location     Type
   714 ;;  r               1    6[COMMON] unsigned char 
   715 ;;  temp            1    9[COMMON] unsigned char 
   716 ;;  low4            1    8[COMMON] unsigned char 
   717 ;;  high4           1    7[COMMON] unsigned char 
   718 ;; Return value:  Size  Location     Type
   719 ;;                  1    wreg      void 
   720 ;; Registers used:
   721 ;;		wreg, status,2, status,0, pclath, cstack
   722 ;; Tracked objects:
   723 ;;		On entry : 0/0
   724 ;;		On exit  : 0/0
   725 ;;		Unchanged: 0/0
   726 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   727 ;;      Params:         1       0       0       0       0
   728 ;;      Locals:         4       0       0       0       0
   729 ;;      Temps:          1       0       0       0       0
   730 ;;      Totals:         6       0       0       0       0
   731 ;;Total ram usage:        6 bytes
   732 ;; Hardware stack levels used: 1
   733 ;; Hardware stack levels required when called: 2
   734 ;; This function calls:
   735 ;;		_LCD_CMD
   736 ;; This function is called by:
   737 ;;		_main
   738 ;; This function uses a non-reentrant model
   739 ;;
   740                           
   741     06F1                     _LCD_Set_Cursor:	
   742                           ;psect for function _LCD_Set_Cursor
   743                           
   744                           
   745                           ;incstack = 0
   746                           ; Regs used in _LCD_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
   747                           ;LCD_Set_Cursor@r stored from wreg
   748     06F1  00F6               	movwf	LCD_Set_Cursor@r
   749     06F2                     l742:
   750                           
   751                           ;lcd.c: 110: void LCD_Set_Cursor (unsigned char r, unsigned char c);lcd.c: 111: {;lcd.c:
      +                           112:     unsigned char temp, low4, high4;;lcd.c: 114:     if (r == 1)
   752     06F2  0376               	decf	LCD_Set_Cursor@r,w
   753     06F3  1D03               	btfss	3,2
   754     06F4  2EF6               	goto	u111
   755     06F5  2EF7               	goto	u110
   756     06F6                     u111:
   757     06F6  2F14               	goto	l754
   758     06F7                     u110:
   759     06F7                     l744:
   760                           
   761                           ;lcd.c: 115:     {;lcd.c: 116:         temp = 0x80 + c - 1;
   762     06F7  0874               	movf	LCD_Set_Cursor@c,w
   763     06F8  3E7F               	addlw	127
   764     06F9  00F9               	movwf	LCD_Set_Cursor@temp
   765                           
   766                           ;lcd.c: 117:         high4 = temp >> 4;
   767     06FA  0879               	movf	LCD_Set_Cursor@temp,w
   768     06FB  00F5               	movwf	??_LCD_Set_Cursor
   769     06FC  3004               	movlw	4
   770     06FD                     u125:
   771     06FD  1003               	clrc
   772     06FE  0CF5               	rrf	??_LCD_Set_Cursor,f
   773     06FF  3EFF               	addlw	-1
   774     0700  1D03               	skipz
   775     0701  2EFD               	goto	u125
   776     0702  0875               	movf	??_LCD_Set_Cursor,w
   777     0703  00F7               	movwf	LCD_Set_Cursor@high4
   778     0704                     l746:
   779                           
   780                           ;lcd.c: 118:         low4 = temp & 0x0f;
   781     0704  0879               	movf	LCD_Set_Cursor@temp,w
   782     0705  00F8               	movwf	LCD_Set_Cursor@low4
   783     0706                     l748:
   784     0706  300F               	movlw	15
   785     0707  05F8               	andwf	LCD_Set_Cursor@low4,f
   786     0708                     l750:
   787                           
   788                           ;lcd.c: 119:         LCD_CMD(high4);
   789     0708  0877               	movf	LCD_Set_Cursor@high4,w
   790     0709  120A  118A  267E  120A  118A  	fcall	_LCD_CMD
   791     070E                     l752:
   792                           
   793                           ;lcd.c: 120:         LCD_CMD(low4);
   794     070E  0878               	movf	LCD_Set_Cursor@low4,w
   795     070F  120A  118A  267E  120A  118A  	fcall	_LCD_CMD
   796     0714                     l754:
   797                           
   798                           ;lcd.c: 123:     if (r == 2)
   799     0714  3002               	movlw	2
   800     0715  0676               	xorwf	LCD_Set_Cursor@r,w
   801     0716  1D03               	btfss	3,2
   802     0717  2F19               	goto	u131
   803     0718  2F1A               	goto	u130
   804     0719                     u131:
   805     0719  2F37               	goto	l58
   806     071A                     u130:
   807     071A                     l756:
   808                           
   809                           ;lcd.c: 124:     {;lcd.c: 125:         temp = 0xc0 + c - 1;
   810     071A  0874               	movf	LCD_Set_Cursor@c,w
   811     071B  3EBF               	addlw	191
   812     071C  00F9               	movwf	LCD_Set_Cursor@temp
   813                           
   814                           ;lcd.c: 126:         high4 = temp >> 4;
   815     071D  0879               	movf	LCD_Set_Cursor@temp,w
   816     071E  00F5               	movwf	??_LCD_Set_Cursor
   817     071F  3004               	movlw	4
   818     0720                     u145:
   819     0720  1003               	clrc
   820     0721  0CF5               	rrf	??_LCD_Set_Cursor,f
   821     0722  3EFF               	addlw	-1
   822     0723  1D03               	skipz
   823     0724  2F20               	goto	u145
   824     0725  0875               	movf	??_LCD_Set_Cursor,w
   825     0726  00F7               	movwf	LCD_Set_Cursor@high4
   826     0727                     l758:
   827                           
   828                           ;lcd.c: 127:         low4 = temp & 0x0f;
   829     0727  0879               	movf	LCD_Set_Cursor@temp,w
   830     0728  00F8               	movwf	LCD_Set_Cursor@low4
   831     0729                     l760:
   832     0729  300F               	movlw	15
   833     072A  05F8               	andwf	LCD_Set_Cursor@low4,f
   834     072B                     l762:
   835                           
   836                           ;lcd.c: 128:         LCD_CMD(high4);
   837     072B  0877               	movf	LCD_Set_Cursor@high4,w
   838     072C  120A  118A  267E  120A  118A  	fcall	_LCD_CMD
   839     0731                     l764:
   840                           
   841                           ;lcd.c: 129:         LCD_CMD(low4);
   842     0731  0878               	movf	LCD_Set_Cursor@low4,w
   843     0732  120A  118A  267E  120A  118A  	fcall	_LCD_CMD
   844     0737                     l58:
   845     0737  0008               	return
   846     0738                     __end_of_LCD_Set_Cursor:
   847                           
   848                           	psect	text4
   849     0789                     __ptext4:	
   850 ;; *************** function _LCD_Init *****************
   851 ;; Defined at:
   852 ;;		line 35 in file "lcd.c"
   853 ;; Parameters:    Size  Location     Type
   854 ;;		None
   855 ;; Auto vars:     Size  Location     Type
   856 ;;		None
   857 ;; Return value:  Size  Location     Type
   858 ;;                  1    wreg      void 
   859 ;; Registers used:
   860 ;;		wreg, status,2, status,0, pclath, cstack
   861 ;; Tracked objects:
   862 ;;		On entry : 0/0
   863 ;;		On exit  : 0/0
   864 ;;		Unchanged: 0/0
   865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   866 ;;      Params:         0       0       0       0       0
   867 ;;      Locals:         0       0       0       0       0
   868 ;;      Temps:          2       0       0       0       0
   869 ;;      Totals:         2       0       0       0       0
   870 ;;Total ram usage:        2 bytes
   871 ;; Hardware stack levels used: 1
   872 ;; Hardware stack levels required when called: 2
   873 ;; This function calls:
   874 ;;		_LCD_CMD
   875 ;;		_LCD_DATA
   876 ;; This function is called by:
   877 ;;		_main
   878 ;; This function uses a non-reentrant model
   879 ;;
   880                           
   881     0789                     _LCD_Init:	
   882                           ;psect for function _LCD_Init
   883                           
   884     0789                     l658:	
   885                           ;incstack = 0
   886                           ; Regs used in _LCD_Init: [wreg+status,2+status,0+pclath+cstack]
   887                           
   888                           
   889                           ;lcd.c: 39:     TRISB = 0;
   890     0789  1683               	bsf	3,5	;RP0=1, select bank1
   891     078A  1303               	bcf	3,6	;RP1=0, select bank1
   892     078B  0186               	clrf	6	;volatile
   893     078C                     l660:
   894                           
   895                           ;lcd.c: 40:     TRISBbits.TRISB5 = 0;
   896     078C  1286               	bcf	6,5	;volatile
   897     078D                     l662:
   898                           
   899                           ;lcd.c: 41:     TRISBbits.TRISB4 = 0;
   900     078D  1206               	bcf	6,4	;volatile
   901     078E                     l664:
   902                           
   903                           ;lcd.c: 44:     LCD_DATA(0);
   904     078E  3000               	movlw	0
   905     078F  120A  118A  265C  120A  118A  	fcall	_LCD_DATA
   906     0794                     l666:
   907                           
   908                           ;lcd.c: 45:     _delay((unsigned long)((30)*(20000000/4000.0)));
   909     0794  30C3               	movlw	195
   910     0795  00F5               	movwf	??_LCD_Init+1
   911     0796  30CD               	movlw	205
   912     0797  00F4               	movwf	??_LCD_Init
   913     0798                     u207:
   914     0798  0BF4               	decfsz	??_LCD_Init,f
   915     0799  2F98               	goto	u207
   916     079A  0BF5               	decfsz	??_LCD_Init+1,f
   917     079B  2F98               	goto	u207
   918     079C                     l668:
   919                           
   920                           ;lcd.c: 46:     _delay((unsigned long)((500)*(20000000/4000000.0)));
   921     079C  3004               	movlw	4
   922     079D  00F5               	movwf	??_LCD_Init+1
   923     079E  303D               	movlw	61
   924     079F  00F4               	movwf	??_LCD_Init
   925     07A0                     u217:
   926     07A0  0BF4               	decfsz	??_LCD_Init,f
   927     07A1  2FA0               	goto	u217
   928     07A2  0BF5               	decfsz	??_LCD_Init+1,f
   929     07A3  2FA0               	goto	u217
   930     07A4  2FA5               	nop2
   931     07A5                     l670:
   932                           
   933                           ;lcd.c: 49:     LCD_CMD(0x03);
   934     07A5  3003               	movlw	3
   935     07A6  120A  118A  267E  120A  118A  	fcall	_LCD_CMD
   936     07AB                     l672:
   937                           
   938                           ;lcd.c: 50:     _delay((unsigned long)((5)*(20000000/4000.0)));
   939     07AB  3021               	movlw	33
   940     07AC  00F5               	movwf	??_LCD_Init+1
   941     07AD  3076               	movlw	118
   942     07AE  00F4               	movwf	??_LCD_Init
   943     07AF                     u227:
   944     07AF  0BF4               	decfsz	??_LCD_Init,f
   945     07B0  2FAF               	goto	u227
   946     07B1  0BF5               	decfsz	??_LCD_Init+1,f
   947     07B2  2FAF               	goto	u227
   948     07B3  0000               	nop
   949     07B4                     l674:
   950                           
   951                           ;lcd.c: 51:     LCD_CMD(0x03);
   952     07B4  3003               	movlw	3
   953     07B5  120A  118A  267E  120A  118A  	fcall	_LCD_CMD
   954     07BA                     l676:
   955                           
   956                           ;lcd.c: 52:     _delay((unsigned long)((150)*(20000000/4000000.0)));
   957     07BA  30F9               	movlw	249
   958     07BB  00F4               	movwf	??_LCD_Init
   959     07BC                     u237:
   960     07BC  0BF4               	decfsz	??_LCD_Init,f
   961     07BD  2FBC               	goto	u237
   962     07BE  2FBF               	nop2
   963     07BF                     l678:
   964                           
   965                           ;lcd.c: 53:     LCD_CMD(0x03);
   966     07BF  3003               	movlw	3
   967     07C0  120A  118A  267E  120A  118A  	fcall	_LCD_CMD
   968     07C5                     l680:
   969                           
   970                           ;lcd.c: 56:     LCD_CMD(0x02);
   971     07C5  3002               	movlw	2
   972     07C6  120A  118A  267E  120A  118A  	fcall	_LCD_CMD
   973     07CB                     l682:
   974                           
   975                           ;lcd.c: 59:     LCD_CMD(0x02);
   976     07CB  3002               	movlw	2
   977     07CC  120A  118A  267E  120A  118A  	fcall	_LCD_CMD
   978     07D1                     l684:
   979                           
   980                           ;lcd.c: 60:     LCD_CMD(0x08);
   981     07D1  3008               	movlw	8
   982     07D2  120A  118A  267E  120A  118A  	fcall	_LCD_CMD
   983     07D7                     l686:
   984                           
   985                           ;lcd.c: 63:     LCD_CMD(0x00);
   986     07D7  3000               	movlw	0
   987     07D8  120A  118A  267E  120A  118A  	fcall	_LCD_CMD
   988     07DD                     l688:
   989                           
   990                           ;lcd.c: 64:     LCD_CMD(0x0c);
   991     07DD  300C               	movlw	12
   992     07DE  120A  118A  267E  120A  118A  	fcall	_LCD_CMD
   993     07E3                     l690:
   994                           
   995                           ;lcd.c: 67:     LCD_CMD(0x00);
   996     07E3  3000               	movlw	0
   997     07E4  120A  118A  267E  120A  118A  	fcall	_LCD_CMD
   998     07E9                     l692:
   999                           
  1000                           ;lcd.c: 68:     LCD_CMD(0x01);
  1001     07E9  3001               	movlw	1
  1002     07EA  120A  118A  267E  120A  118A  	fcall	_LCD_CMD
  1003     07EF                     l694:
  1004                           
  1005                           ;lcd.c: 71:     LCD_CMD(0x00);
  1006     07EF  3000               	movlw	0
  1007     07F0  120A  118A  267E  120A  118A  	fcall	_LCD_CMD
  1008     07F5                     l696:
  1009                           
  1010                           ;lcd.c: 72:     LCD_CMD(0x06);
  1011     07F5  3006               	movlw	6
  1012     07F6  120A  118A  267E  120A  118A  	fcall	_LCD_CMD
  1013     07FB                     l41:
  1014     07FB  0008               	return
  1015     07FC                     __end_of_LCD_Init:
  1016                           
  1017                           	psect	text5
  1018     064F                     __ptext5:	
  1019 ;; *************** function _LCD_Clear *****************
  1020 ;; Defined at:
  1021 ;;		line 75 in file "lcd.c"
  1022 ;; Parameters:    Size  Location     Type
  1023 ;;		None
  1024 ;; Auto vars:     Size  Location     Type
  1025 ;;		None
  1026 ;; Return value:  Size  Location     Type
  1027 ;;                  1    wreg      void 
  1028 ;; Registers used:
  1029 ;;		wreg, status,2, status,0, pclath, cstack
  1030 ;; Tracked objects:
  1031 ;;		On entry : 0/0
  1032 ;;		On exit  : 0/0
  1033 ;;		Unchanged: 0/0
  1034 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1035 ;;      Params:         0       0       0       0       0
  1036 ;;      Locals:         0       0       0       0       0
  1037 ;;      Temps:          0       0       0       0       0
  1038 ;;      Totals:         0       0       0       0       0
  1039 ;;Total ram usage:        0 bytes
  1040 ;; Hardware stack levels used: 1
  1041 ;; Hardware stack levels required when called: 2
  1042 ;; This function calls:
  1043 ;;		_LCD_CMD
  1044 ;; This function is called by:
  1045 ;;		_main
  1046 ;; This function uses a non-reentrant model
  1047 ;;
  1048                           
  1049     064F                     _LCD_Clear:	
  1050                           ;psect for function _LCD_Clear
  1051                           
  1052     064F                     l698:	
  1053                           ;incstack = 0
  1054                           ; Regs used in _LCD_Clear: [wreg+status,2+status,0+pclath+cstack]
  1055                           
  1056                           
  1057                           ;lcd.c: 77:     LCD_CMD(0);
  1058     064F  3000               	movlw	0
  1059     0650  120A  118A  267E  120A  118A  	fcall	_LCD_CMD
  1060                           
  1061                           ;lcd.c: 78:     LCD_CMD(1);
  1062     0655  3001               	movlw	1
  1063     0656  120A  118A  267E  120A  118A  	fcall	_LCD_CMD
  1064     065B                     l44:
  1065     065B  0008               	return
  1066     065C                     __end_of_LCD_Clear:
  1067                           
  1068                           	psect	text6
  1069     067E                     __ptext6:	
  1070 ;; *************** function _LCD_CMD *****************
  1071 ;; Defined at:
  1072 ;;		line 20 in file "lcd.c"
  1073 ;; Parameters:    Size  Location     Type
  1074 ;;  CMD             1    wreg     unsigned char 
  1075 ;; Auto vars:     Size  Location     Type
  1076 ;;  CMD             1    3[COMMON] unsigned char 
  1077 ;; Return value:  Size  Location     Type
  1078 ;;                  1    wreg      void 
  1079 ;; Registers used:
  1080 ;;		wreg, status,2, status,0, pclath, cstack
  1081 ;; Tracked objects:
  1082 ;;		On entry : 0/0
  1083 ;;		On exit  : 0/0
  1084 ;;		Unchanged: 0/0
  1085 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1086 ;;      Params:         0       0       0       0       0
  1087 ;;      Locals:         1       0       0       0       0
  1088 ;;      Temps:          2       0       0       0       0
  1089 ;;      Totals:         3       0       0       0       0
  1090 ;;Total ram usage:        3 bytes
  1091 ;; Hardware stack levels used: 1
  1092 ;; Hardware stack levels required when called: 1
  1093 ;; This function calls:
  1094 ;;		_LCD_DATA
  1095 ;; This function is called by:
  1096 ;;		_LCD_Init
  1097 ;;		_LCD_Clear
  1098 ;;		_LCD_Set_Cursor
  1099 ;;		_LCD_SR
  1100 ;;		_LCD_SL
  1101 ;; This function uses a non-reentrant model
  1102 ;;
  1103                           
  1104     067E                     _LCD_CMD:	
  1105                           ;psect for function _LCD_CMD
  1106                           
  1107                           
  1108                           ;incstack = 0
  1109                           ; Regs used in _LCD_CMD: [wreg+status,2+status,0+pclath+cstack]
  1110                           ;LCD_CMD@CMD stored from wreg
  1111     067E  00F3               	movwf	LCD_CMD@CMD
  1112     067F                     l618:
  1113                           
  1114                           ;lcd.c: 20: void LCD_CMD (unsigned char CMD);lcd.c: 21: {;lcd.c: 24:     PORTBbits.RB5 =
      +                           0;
  1115     067F  1283               	bcf	3,5	;RP0=0, select bank0
  1116     0680  1303               	bcf	3,6	;RP1=0, select bank0
  1117     0681  1286               	bcf	6,5	;volatile
  1118     0682                     l620:
  1119                           
  1120                           ;lcd.c: 26:     LCD_DATA(CMD);
  1121     0682  0873               	movf	LCD_CMD@CMD,w
  1122     0683  120A  118A  265C  120A  118A  	fcall	_LCD_DATA
  1123     0688                     l622:
  1124                           
  1125                           ;lcd.c: 28:     PORTBbits.RB4 = 1;
  1126     0688  1283               	bcf	3,5	;RP0=0, select bank0
  1127     0689  1303               	bcf	3,6	;RP1=0, select bank0
  1128     068A  1606               	bsf	6,4	;volatile
  1129     068B                     l624:
  1130                           
  1131                           ;lcd.c: 29:     _delay((unsigned long)((500)*(20000000/4000000.0)));
  1132     068B  3004               	movlw	4
  1133     068C  00F2               	movwf	??_LCD_CMD+1
  1134     068D  303D               	movlw	61
  1135     068E  00F1               	movwf	??_LCD_CMD
  1136     068F                     u247:
  1137     068F  0BF1               	decfsz	??_LCD_CMD,f
  1138     0690  2E8F               	goto	u247
  1139     0691  0BF2               	decfsz	??_LCD_CMD+1,f
  1140     0692  2E8F               	goto	u247
  1141     0693  2E94               	nop2
  1142     0694                     l626:
  1143                           
  1144                           ;lcd.c: 30:     PORTBbits.RB4 = 0;
  1145     0694  1283               	bcf	3,5	;RP0=0, select bank0
  1146     0695  1303               	bcf	3,6	;RP1=0, select bank0
  1147     0696  1206               	bcf	6,4	;volatile
  1148     0697                     l628:
  1149                           
  1150                           ;lcd.c: 31:     _delay((unsigned long)((500)*(20000000/4000000.0)));
  1151     0697  3004               	movlw	4
  1152     0698  00F2               	movwf	??_LCD_CMD+1
  1153     0699  303D               	movlw	61
  1154     069A  00F1               	movwf	??_LCD_CMD
  1155     069B                     u257:
  1156     069B  0BF1               	decfsz	??_LCD_CMD,f
  1157     069C  2E9B               	goto	u257
  1158     069D  0BF2               	decfsz	??_LCD_CMD+1,f
  1159     069E  2E9B               	goto	u257
  1160     069F  2EA0               	nop2
  1161     06A0                     l38:
  1162     06A0  0008               	return
  1163     06A1                     __end_of_LCD_CMD:
  1164                           
  1165                           	psect	text7
  1166     065C                     __ptext7:	
  1167 ;; *************** function _LCD_DATA *****************
  1168 ;; Defined at:
  1169 ;;		line 4 in file "lcd.c"
  1170 ;; Parameters:    Size  Location     Type
  1171 ;;  data            1    wreg     unsigned char 
  1172 ;; Auto vars:     Size  Location     Type
  1173 ;;  data            1    0[COMMON] unsigned char 
  1174 ;; Return value:  Size  Location     Type
  1175 ;;                  1    wreg      void 
  1176 ;; Registers used:
  1177 ;;		wreg
  1178 ;; Tracked objects:
  1179 ;;		On entry : 0/0
  1180 ;;		On exit  : 0/0
  1181 ;;		Unchanged: 0/0
  1182 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1183 ;;      Params:         0       0       0       0       0
  1184 ;;      Locals:         1       0       0       0       0
  1185 ;;      Temps:          0       0       0       0       0
  1186 ;;      Totals:         1       0       0       0       0
  1187 ;;Total ram usage:        1 bytes
  1188 ;; Hardware stack levels used: 1
  1189 ;; This function calls:
  1190 ;;		Nothing
  1191 ;; This function is called by:
  1192 ;;		_LCD_CMD
  1193 ;;		_LCD_Init
  1194 ;;		_LCD_Write_Char
  1195 ;; This function uses a non-reentrant model
  1196 ;;
  1197                           
  1198     065C                     _LCD_DATA:	
  1199                           ;psect for function _LCD_DATA
  1200                           
  1201                           
  1202                           ;incstack = 0
  1203                           ; Regs used in _LCD_DATA: [wreg]
  1204                           ;LCD_DATA@data stored from wreg
  1205     065C  00F0               	movwf	LCD_DATA@data
  1206     065D                     l608:
  1207                           
  1208                           ;lcd.c: 4: void LCD_DATA(unsigned char data);lcd.c: 5: {;lcd.c: 6:     if(data & 1)
  1209     065D  1C70               	btfss	LCD_DATA@data,0
  1210     065E  2E60               	goto	u11
  1211     065F  2E61               	goto	u10
  1212     0660                     u11:
  1213     0660  2E65               	goto	l27
  1214     0661                     u10:
  1215     0661                     l610:
  1216                           
  1217                           ;lcd.c: 7:         PORTBbits.RB0 = 1;
  1218     0661  1283               	bcf	3,5	;RP0=0, select bank0
  1219     0662  1303               	bcf	3,6	;RP1=0, select bank0
  1220     0663  1406               	bsf	6,0	;volatile
  1221     0664  2E68               	goto	l28
  1222     0665                     l27:	
  1223                           ;lcd.c: 8:     else PORTBbits.RB0 = 0;
  1224                           
  1225     0665  1283               	bcf	3,5	;RP0=0, select bank0
  1226     0666  1303               	bcf	3,6	;RP1=0, select bank0
  1227     0667  1006               	bcf	6,0	;volatile
  1228     0668                     l28:
  1229                           
  1230                           ;lcd.c: 9:     if (data & 2)
  1231     0668  1CF0               	btfss	LCD_DATA@data,1
  1232     0669  2E6B               	goto	u21
  1233     066A  2E6C               	goto	u20
  1234     066B                     u21:
  1235     066B  2E6E               	goto	l29
  1236     066C                     u20:
  1237     066C                     l612:
  1238                           
  1239                           ;lcd.c: 10:         PORTBbits.RB1 = 1;
  1240     066C  1486               	bsf	6,1	;volatile
  1241     066D  2E6F               	goto	l30
  1242     066E                     l29:	
  1243                           ;lcd.c: 11:     else PORTBbits.RB1 = 0;
  1244                           
  1245     066E  1086               	bcf	6,1	;volatile
  1246     066F                     l30:
  1247                           
  1248                           ;lcd.c: 12:     if (data & 4)
  1249     066F  1D70               	btfss	LCD_DATA@data,2
  1250     0670  2E72               	goto	u31
  1251     0671  2E73               	goto	u30
  1252     0672                     u31:
  1253     0672  2E75               	goto	l31
  1254     0673                     u30:
  1255     0673                     l614:
  1256                           
  1257                           ;lcd.c: 13:         PORTBbits.RB2 = 1;
  1258     0673  1506               	bsf	6,2	;volatile
  1259     0674  2E76               	goto	l32
  1260     0675                     l31:	
  1261                           ;lcd.c: 14:     else PORTBbits.RB2 = 0;
  1262                           
  1263     0675  1106               	bcf	6,2	;volatile
  1264     0676                     l32:
  1265                           
  1266                           ;lcd.c: 15:     if (data & 8)
  1267     0676  1DF0               	btfss	LCD_DATA@data,3
  1268     0677  2E79               	goto	u41
  1269     0678  2E7A               	goto	u40
  1270     0679                     u41:
  1271     0679  2E7C               	goto	l33
  1272     067A                     u40:
  1273     067A                     l616:
  1274                           
  1275                           ;lcd.c: 16:         PORTBbits.RB3 = 1;
  1276     067A  1586               	bsf	6,3	;volatile
  1277     067B  2E7D               	goto	l35
  1278     067C                     l33:	
  1279                           ;lcd.c: 17:     else PORTBbits.RB3 = 0;
  1280                           
  1281     067C  1186               	bcf	6,3	;volatile
  1282     067D                     l35:
  1283     067D  0008               	return
  1284     067E                     __end_of_LCD_DATA:
  1285     0002                     ___latbits      equ	2
  1286     007E                     btemp           set	126	;btemp
  1287     007E                     wtemp0          set	126
  1288                           
  1289                           	psect	config
  1290                           
  1291                           ;Config register CONFIG @ 0x2007
  1292                           ;	Oscillator Selection bits
  1293                           ;	FOSC = HS, HS oscillator
  1294                           ;	Watchdog Timer Enable bit
  1295                           ;	WDTE = OFF, WDT disabled
  1296                           ;	Power-up Timer Enable bit
  1297                           ;	PWRTE = ON, PWRT enabled
  1298                           ;	FLASH Program Memory Code Protection bits
  1299                           ;	CP = OFF, Code protection off
  1300                           ;	Brown-out Reset Enable bit
  1301                           ;	BOREN = ON, BOR enabled
  1302                           ;	Low Voltage In-Circuit Serial Programming Enable bit
  1303                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  1304                           ;	Data EE Memory Code Protection
  1305                           ;	CPD = OFF, Code Protection off
  1306                           ;	FLASH Program Memory Write Enable
  1307                           ;	WRT = OFF, Unprotected program memory may not be written to by EECON control
  1308                           ;	In-Circuit Debugger Mode bit
  1309                           ;	DEBUG = 0x1, unprogrammed default
  1310     2007                     	org	8199
  1311     2007  3D72               	dw	15730

Data Sizes:
    Strings     15
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      10
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    LCD_Write_String@str	PTR unsigned char  size(1) Largest target is 9
		 -> STR_1(CODE[9]), STR_2(CODE[6]), 


Critical Paths under _main in COMMON

    _main->_LCD_Set_Cursor
    _LCD_Write_String->_LCD_Write_Char
    _LCD_Write_Char->_LCD_DATA
    _LCD_Set_Cursor->_LCD_CMD
    _LCD_Init->_LCD_CMD
    _LCD_Clear->_LCD_CMD
    _LCD_CMD->_LCD_DATA

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     785
                          _LCD_Clear
                           _LCD_Init
                     _LCD_Set_Cursor
                   _LCD_Write_String
 ---------------------------------------------------------------------------------
 (1) _LCD_Write_String                                     3     2      1     212
                                              6 COMMON     3     2      1
                     _LCD_Write_Char
 ---------------------------------------------------------------------------------
 (2) _LCD_Write_Char                                       5     5      0     120
                                              1 COMMON     5     5      0
                           _LCD_DATA
 ---------------------------------------------------------------------------------
 (1) _LCD_Set_Cursor                                       6     5      1     363
                                              4 COMMON     6     5      1
                            _LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             2     2      0     135
                                              4 COMMON     2     2      0
                            _LCD_CMD
                           _LCD_DATA
 ---------------------------------------------------------------------------------
 (1) _LCD_Clear                                            0     0      0      75
                            _LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _LCD_CMD                                              3     3      0      75
                                              1 COMMON     3     3      0
                           _LCD_DATA
 ---------------------------------------------------------------------------------
 (3) _LCD_DATA                                             1     1      0      60
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_Clear
     _LCD_CMD
       _LCD_DATA
   _LCD_Init
     _LCD_CMD
     _LCD_DATA
   _LCD_Set_Cursor
     _LCD_CMD
   _LCD_Write_String
     _LCD_Write_Char
       _LCD_DATA

Address spaces:
Name               Size   Autos  Total    Usage
BITCOMMON           14      0       0      0.0%
BITBANK0            80      0       0      0.0%
BITBANK1            80      0       0      0.0%
BITBANK3            96      0       0      0.0%
BITBANK2            96      0       0      0.0%
COMMON              14     10      10     71.4%
BANK0               80      0       0      0.0%
BANK1               80      0       0      0.0%
BANK3               96      0       0      0.0%
BANK2               96      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0      10      0.0%


Microchip Technology PIC Macro Assembler V3.00 build 20241204225717 
Symbol Table                                                                                   Fri Mar 21 23:45:14 2025

                       pc 0002                        l13 06ED                        l30 066F  
                      l14 06ED                        l31 0675                        l32 0676  
                      l33 067C                        l41 07FB                        l35 067D  
                      l27 0665                        l28 0668                        l44 065B  
                      l29 066E                        l53 06C4                        l38 06A0  
                      l47 0788                        l58 0737                        u10 0661  
                      u11 0660                        u20 066C                        u21 066B  
                      u30 0673                        u31 0672                        u40 067A  
                      u41 0679                        u55 0747                        fsr 0004  
                     l610 0661                       l612 066C                       l620 0682  
                     l614 0673                       l622 0688                       l630 0739  
                     l616 067A                       l608 065D                       l624 068B  
                     l640 0752                       l632 073B                       l626 0694  
                     l618 067F                       l650 0770                       l642 0755  
                     l634 073D                       l628 0697                       l660 078C  
                     l652 0773                       l644 075E                       l636 0741  
                     l670 07A5                       l662 078D                       l750 0708  
                     l742 06F2                       l654 077C                       l646 0761  
                     l638 0744                       l680 07C5                       l672 07AB  
                     l664 078E                       l760 0729                       l752 070E  
                     l744 06F7                       l656 077F                       l648 076A  
                     l690 07E3                       l682 07CB                       l674 07B4  
                     l666 0794                       l658 0789                       l762 072B  
                     l746 0704                       l754 0714                       l770 06B1  
                     l692 07E9                       l684 07D1                       l676 07BA  
                     l668 079C                       l764 0731                       l756 071A  
                     l748 0706                       l772 06B7                       l694 07EF  
                     l686 07D7                       l678 07BF                       l758 0727  
                     l766 06A1                       l774 06C5                       l696 07F5  
                     l688 07DD                       l768 06A4                       l776 06D7  
                     l698 064F                       l778 06DE                       u110 06F7  
                     u111 06F6                       u130 071A                       u131 0719  
                     u125 06FD                       u150 06C4                       u207 0798  
                     u151 06C3                       u217 07A0                       u145 0720  
                     u227 07AF                       u237 07BC                       u247 068F  
                     u167 0759                       u257 069B                       u177 0765  
                     u187 0777                       u197 0783                       fsr0 0004  
         __end_of_LCD_CMD 06A1            _LCD_Set_Cursor 06F1       LCD_Write_String@str 0076  
                    STR_1 0009                      STR_2 0012         ?_LCD_Write_String 0076  
                    _main 06C5                      btemp 007E                      start 0000  
      ??_LCD_Write_String 0077          __end_of_LCD_DATA 067E          __end_of_LCD_Init 07FC  
                   ?_main 0070                     _TRISB 0086    __end_of_LCD_Set_Cursor 0738  
                   pclath 000A                     status 0003                     wtemp0 007E  
          _LCD_Write_Char 0738           __initialization 07FC              __end_of_main 06F1  
                  ??_main 007A         __end_of_LCD_Clear 065C                 ??_LCD_CMD 0071  
         ?_LCD_Set_Cursor 0074    __end_of_LCD_Write_Char 0789           LCD_Set_Cursor@c 0074  
         LCD_Set_Cursor@r 0076                 ?_LCD_DATA 0070   __end_of__initialization 07FC  
               ?_LCD_Init 0070           ?_LCD_Write_Char 0070            __pcstackCOMMON 0070  
              ??_LCD_DATA 0070                ??_LCD_Init 0074                __pmaintext 06C5  
                 _LCD_CMD 067E                __stringtab 0003          ??_LCD_Set_Cursor 0075  
                 __ptext1 06A1                   __ptext2 0738                   __ptext3 06F1  
                 __ptext4 0789                   __ptext5 064F                   __ptext6 067E  
                 __ptext7 065C                 _LCD_Clear 064F      end_of_initialization 07FC  
               _PORTBbits 0006                LCD_CMD@CMD 0073                 _TRISBbits 0086  
              ?_LCD_Clear 0070         LCD_Write_String@i 0077          ??_LCD_Write_Char 0071  
        _LCD_Write_String 06A1       start_initialization 07FC                  ?_LCD_CMD 0070  
               ___latbits 0002               ??_LCD_Clear 0074                 __pstrings 0003  
                _LCD_DATA 065C                  _LCD_Init 0789               __stringbase 0008  
__end_of_LCD_Write_String 06C5       LCD_Write_Char@high4 0074        __end_of__stringtab 0009  
     LCD_Set_Cursor@high4 0077        LCD_Write_Char@data 0075        LCD_Write_Char@low4 0073  
               stringcode 0003        LCD_Set_Cursor@low4 0078        LCD_Set_Cursor@temp 0079  
            LCD_DATA@data 0070                  stringdir 0003                  stringtab 0003  
