

Microchip MPLAB XC8 Assembler V3.00 build 20241204225717 
                                                                                               Sat Mar 22 12:12:35 2025

Microchip MPLAB XC8 C Compiler v3.00 (Free license) build 20241204225717 Og1 
     1                           	processor	16F877
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,space=0,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
     9                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,space=0,merge=1,delta=2
    14                           	psect	text6,local,class=CODE,space=0,merge=1,delta=2
    15                           	psect	text7,local,class=CODE,space=0,merge=1,delta=2
    16                           	psect	text8,local,class=CODE,space=0,merge=1,delta=2
    17                           	psect	text9,local,class=CODE,space=0,merge=1,delta=2
    18                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    19                           	dabs	1,0x7E,2
    20     0000                     
    21                           ; Generated 12/10/2023 GMT
    22                           ; 
    23                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    24                           ; All rights reserved.
    25                           ; 
    26                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    27                           ; 
    28                           ; Redistribution and use in source and binary forms, with or without modification, are
    29                           ; permitted provided that the following conditions are met:
    30                           ; 
    31                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    32                           ;        conditions and the following disclaimer.
    33                           ; 
    34                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    35                           ;        of conditions and the following disclaimer in the documentation and/or other
    36                           ;        materials provided with the distribution. Publication is not required when
    37                           ;        this file is used in an embedded application.
    38                           ; 
    39                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    40                           ;        software without specific prior written permission.
    41                           ; 
    42                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    43                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    44                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    45                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    46                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    47                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    48                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    49                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    50                           ; 
    51                           ; 
    52                           ; Code-generator required, PIC16F877 Definitions
    53                           ; 
    54                           ; SFR Addresses
    55     0004                     fsr             equ	4
    56     0004                     fsr0            equ	4
    57     0000                     indf            equ	0
    58     0000                     indf0           equ	0
    59     0002                     pc              equ	2
    60     0002                     pcl             equ	2
    61     000A                     pclath          equ	10
    62     0003                     status          equ	3
    63     0000                     INDF            equ	0	;# 
    64     0001                     TMR0            equ	1	;# 
    65     0002                     PCL             equ	2	;# 
    66     0003                     STATUS          equ	3	;# 
    67     0004                     FSR             equ	4	;# 
    68     0005                     PORTA           equ	5	;# 
    69     0006                     PORTB           equ	6	;# 
    70     0007                     PORTC           equ	7	;# 
    71     0008                     PORTD           equ	8	;# 
    72     0009                     PORTE           equ	9	;# 
    73     000A                     PCLATH          equ	10	;# 
    74     000B                     INTCON          equ	11	;# 
    75     000C                     PIR1            equ	12	;# 
    76     000D                     PIR2            equ	13	;# 
    77     000E                     TMR1            equ	14	;# 
    78     000E                     TMR1L           equ	14	;# 
    79     000F                     TMR1H           equ	15	;# 
    80     0010                     T1CON           equ	16	;# 
    81     0011                     TMR2            equ	17	;# 
    82     0012                     T2CON           equ	18	;# 
    83     0013                     SSPBUF          equ	19	;# 
    84     0014                     SSPCON          equ	20	;# 
    85     0015                     CCPR1           equ	21	;# 
    86     0015                     CCPR1L          equ	21	;# 
    87     0016                     CCPR1H          equ	22	;# 
    88     0017                     CCP1CON         equ	23	;# 
    89     0018                     RCSTA           equ	24	;# 
    90     0019                     TXREG           equ	25	;# 
    91     001A                     RCREG           equ	26	;# 
    92     001B                     CCPR2           equ	27	;# 
    93     001B                     CCPR2L          equ	27	;# 
    94     001C                     CCPR2H          equ	28	;# 
    95     001D                     CCP2CON         equ	29	;# 
    96     001E                     ADRESH          equ	30	;# 
    97     001F                     ADCON0          equ	31	;# 
    98     0081                     OPTION_REG      equ	129	;# 
    99     0085                     TRISA           equ	133	;# 
   100     0086                     TRISB           equ	134	;# 
   101     0087                     TRISC           equ	135	;# 
   102     0088                     TRISD           equ	136	;# 
   103     0089                     TRISE           equ	137	;# 
   104     008C                     PIE1            equ	140	;# 
   105     008D                     PIE2            equ	141	;# 
   106     008E                     PCON            equ	142	;# 
   107     0091                     SSPCON2         equ	145	;# 
   108     0092                     PR2             equ	146	;# 
   109     0093                     SSPADD          equ	147	;# 
   110     0094                     SSPSTAT         equ	148	;# 
   111     0098                     TXSTA           equ	152	;# 
   112     0099                     SPBRG           equ	153	;# 
   113     009E                     ADRESL          equ	158	;# 
   114     009F                     ADCON1          equ	159	;# 
   115     010C                     EEDATA          equ	268	;# 
   116     010D                     EEADR           equ	269	;# 
   117     010E                     EEDATH          equ	270	;# 
   118     010F                     EEADRH          equ	271	;# 
   119     018C                     EECON1          equ	396	;# 
   120     018D                     EECON2          equ	397	;# 
   121     0000                     INDF            equ	0	;# 
   122     0001                     TMR0            equ	1	;# 
   123     0002                     PCL             equ	2	;# 
   124     0003                     STATUS          equ	3	;# 
   125     0004                     FSR             equ	4	;# 
   126     0005                     PORTA           equ	5	;# 
   127     0006                     PORTB           equ	6	;# 
   128     0007                     PORTC           equ	7	;# 
   129     0008                     PORTD           equ	8	;# 
   130     0009                     PORTE           equ	9	;# 
   131     000A                     PCLATH          equ	10	;# 
   132     000B                     INTCON          equ	11	;# 
   133     000C                     PIR1            equ	12	;# 
   134     000D                     PIR2            equ	13	;# 
   135     000E                     TMR1            equ	14	;# 
   136     000E                     TMR1L           equ	14	;# 
   137     000F                     TMR1H           equ	15	;# 
   138     0010                     T1CON           equ	16	;# 
   139     0011                     TMR2            equ	17	;# 
   140     0012                     T2CON           equ	18	;# 
   141     0013                     SSPBUF          equ	19	;# 
   142     0014                     SSPCON          equ	20	;# 
   143     0015                     CCPR1           equ	21	;# 
   144     0015                     CCPR1L          equ	21	;# 
   145     0016                     CCPR1H          equ	22	;# 
   146     0017                     CCP1CON         equ	23	;# 
   147     0018                     RCSTA           equ	24	;# 
   148     0019                     TXREG           equ	25	;# 
   149     001A                     RCREG           equ	26	;# 
   150     001B                     CCPR2           equ	27	;# 
   151     001B                     CCPR2L          equ	27	;# 
   152     001C                     CCPR2H          equ	28	;# 
   153     001D                     CCP2CON         equ	29	;# 
   154     001E                     ADRESH          equ	30	;# 
   155     001F                     ADCON0          equ	31	;# 
   156     0081                     OPTION_REG      equ	129	;# 
   157     0085                     TRISA           equ	133	;# 
   158     0086                     TRISB           equ	134	;# 
   159     0087                     TRISC           equ	135	;# 
   160     0088                     TRISD           equ	136	;# 
   161     0089                     TRISE           equ	137	;# 
   162     008C                     PIE1            equ	140	;# 
   163     008D                     PIE2            equ	141	;# 
   164     008E                     PCON            equ	142	;# 
   165     0091                     SSPCON2         equ	145	;# 
   166     0092                     PR2             equ	146	;# 
   167     0093                     SSPADD          equ	147	;# 
   168     0094                     SSPSTAT         equ	148	;# 
   169     0098                     TXSTA           equ	152	;# 
   170     0099                     SPBRG           equ	153	;# 
   171     009E                     ADRESL          equ	158	;# 
   172     009F                     ADCON1          equ	159	;# 
   173     010C                     EEDATA          equ	268	;# 
   174     010D                     EEADR           equ	269	;# 
   175     010E                     EEDATH          equ	270	;# 
   176     010F                     EEADRH          equ	271	;# 
   177     018C                     EECON1          equ	396	;# 
   178     018D                     EECON2          equ	397	;# 
   179     0000                     INDF            equ	0	;# 
   180     0001                     TMR0            equ	1	;# 
   181     0002                     PCL             equ	2	;# 
   182     0003                     STATUS          equ	3	;# 
   183     0004                     FSR             equ	4	;# 
   184     0005                     PORTA           equ	5	;# 
   185     0006                     PORTB           equ	6	;# 
   186     0007                     PORTC           equ	7	;# 
   187     0008                     PORTD           equ	8	;# 
   188     0009                     PORTE           equ	9	;# 
   189     000A                     PCLATH          equ	10	;# 
   190     000B                     INTCON          equ	11	;# 
   191     000C                     PIR1            equ	12	;# 
   192     000D                     PIR2            equ	13	;# 
   193     000E                     TMR1            equ	14	;# 
   194     000E                     TMR1L           equ	14	;# 
   195     000F                     TMR1H           equ	15	;# 
   196     0010                     T1CON           equ	16	;# 
   197     0011                     TMR2            equ	17	;# 
   198     0012                     T2CON           equ	18	;# 
   199     0013                     SSPBUF          equ	19	;# 
   200     0014                     SSPCON          equ	20	;# 
   201     0015                     CCPR1           equ	21	;# 
   202     0015                     CCPR1L          equ	21	;# 
   203     0016                     CCPR1H          equ	22	;# 
   204     0017                     CCP1CON         equ	23	;# 
   205     0018                     RCSTA           equ	24	;# 
   206     0019                     TXREG           equ	25	;# 
   207     001A                     RCREG           equ	26	;# 
   208     001B                     CCPR2           equ	27	;# 
   209     001B                     CCPR2L          equ	27	;# 
   210     001C                     CCPR2H          equ	28	;# 
   211     001D                     CCP2CON         equ	29	;# 
   212     001E                     ADRESH          equ	30	;# 
   213     001F                     ADCON0          equ	31	;# 
   214     0081                     OPTION_REG      equ	129	;# 
   215     0085                     TRISA           equ	133	;# 
   216     0086                     TRISB           equ	134	;# 
   217     0087                     TRISC           equ	135	;# 
   218     0088                     TRISD           equ	136	;# 
   219     0089                     TRISE           equ	137	;# 
   220     008C                     PIE1            equ	140	;# 
   221     008D                     PIE2            equ	141	;# 
   222     008E                     PCON            equ	142	;# 
   223     0091                     SSPCON2         equ	145	;# 
   224     0092                     PR2             equ	146	;# 
   225     0093                     SSPADD          equ	147	;# 
   226     0094                     SSPSTAT         equ	148	;# 
   227     0098                     TXSTA           equ	152	;# 
   228     0099                     SPBRG           equ	153	;# 
   229     009E                     ADRESL          equ	158	;# 
   230     009F                     ADCON1          equ	159	;# 
   231     010C                     EEDATA          equ	268	;# 
   232     010D                     EEADR           equ	269	;# 
   233     010E                     EEDATH          equ	270	;# 
   234     010F                     EEADRH          equ	271	;# 
   235     018C                     EECON1          equ	396	;# 
   236     018D                     EECON2          equ	397	;# 
   237     0006                     _PORTBbits      set	6
   238     0086                     _TRISBbits      set	134
   239     0086                     _TRISB          set	134
   240                           
   241                           	psect	strings
   242     0003                     __pstrings:
   243     0003                     stringtab:
   244     0003                     __stringtab:
   245     0003                     stringcode:	
   246                           ;	String table - string pointers are 1 byte each
   247                           
   248     0003                     stringdir:
   249     0003  3000               	movlw	high stringdir
   250     0004  008A               	movwf	10
   251     0005  0804               	movf	4,w
   252     0006  0A84               	incf	4,f
   253     0007  0782               	addwf	2,f
   254     0008                     __stringbase:
   255     0008  3400               	retlw	0
   256     0009                     __end_of__stringtab:
   257     0009                     STR_1:
   258     0009  3444               	retlw	68	;'D'
   259     000A  3449               	retlw	73	;'I'
   260     000B  344E               	retlw	78	;'N'
   261     000C  3448               	retlw	72	;'H'
   262     000D  3454               	retlw	84	;'T'
   263     000E  3449               	retlw	73	;'I'
   264     000F  3445               	retlw	69	;'E'
   265     0010  344E               	retlw	78	;'N'
   266     0011  3400               	retlw	0
   267     0012                     STR_2:
   268     0012  3448               	retlw	72	;'H'
   269     0013  3443               	retlw	67	;'C'
   270     0014  344D               	retlw	77	;'M'
   271     0015  3455               	retlw	85	;'U'
   272     0016  3454               	retlw	84	;'T'
   273     0017  3400               	retlw	0
   274                           
   275                           	psect	cinit
   276     07FC                     start_initialization:	
   277                           ; #config settings
   278                           
   279     07FC                     __initialization:
   280     07FC                     end_of_initialization:	
   281                           ;End of C runtime variable initialization code
   282                           
   283     07FC                     __end_of__initialization:
   284     07FC  0183               	clrf	3
   285     07FD  120A  118A  2F7A   	ljmp	_main	;jump to C main() function
   286                           
   287                           	psect	cstackCOMMON
   288     0070                     __pcstackCOMMON:
   289     0070                     ?_LCD_Init:
   290     0070                     ?_LCD_Clear:	
   291                           ; 1 bytes @ 0x0
   292                           
   293     0070                     ?_LCD_SR:	
   294                           ; 1 bytes @ 0x0
   295                           
   296     0070                     ?_LCD_SL:	
   297                           ; 1 bytes @ 0x0
   298                           
   299     0070                     ?_main:	
   300                           ; 1 bytes @ 0x0
   301                           
   302     0070                     ?_LCD_DATA:	
   303                           ; 1 bytes @ 0x0
   304                           
   305     0070                     ?_LCD_CMD:	
   306                           ; 1 bytes @ 0x0
   307                           
   308     0070                     ?_LCD_Write_Char:	
   309                           ; 1 bytes @ 0x0
   310                           
   311     0070                     LCD_DATA@data:	
   312                           ; 1 bytes @ 0x0
   313                           
   314     0070                     ??_LCD_DATA:	
   315                           ; 1 bytes @ 0x0
   316                           
   317                           
   318                           ; 1 bytes @ 0x0
   319     0070                     	ds	1
   320     0071                     ??_LCD_CMD:
   321     0071                     ??_LCD_Write_Char:	
   322                           ; 1 bytes @ 0x1
   323                           
   324                           
   325                           ; 1 bytes @ 0x1
   326     0071                     	ds	2
   327     0073                     LCD_CMD@cmd:
   328     0073                     LCD_Write_Char@high4:	
   329                           ; 1 bytes @ 0x3
   330                           
   331                           
   332                           ; 1 bytes @ 0x3
   333     0073                     	ds	1
   334     0074                     ?_LCD_Set_Cursor:
   335     0074                     LCD_Write_Char@low4:	
   336                           ; 1 bytes @ 0x4
   337                           
   338     0074                     LCD_Set_Cursor@c:	
   339                           ; 1 bytes @ 0x4
   340                           
   341     0074                     ??_LCD_Init:	
   342                           ; 1 bytes @ 0x4
   343                           
   344     0074                     ??_LCD_Clear:	
   345                           ; 1 bytes @ 0x4
   346                           
   347     0074                     ??_LCD_SR:	
   348                           ; 1 bytes @ 0x4
   349                           
   350     0074                     ??_LCD_SL:	
   351                           ; 1 bytes @ 0x4
   352                           
   353                           
   354                           ; 1 bytes @ 0x4
   355     0074                     	ds	1
   356     0075                     LCD_Write_Char@data:
   357     0075                     ??_LCD_Set_Cursor:	
   358                           ; 1 bytes @ 0x5
   359                           
   360                           
   361                           ; 1 bytes @ 0x5
   362     0075                     	ds	1
   363     0076                     ?_LCD_Write_String:
   364     0076                     LCD_Write_String@str:	
   365                           ; 1 bytes @ 0x6
   366                           
   367     0076                     LCD_Set_Cursor@r:	
   368                           ; 1 bytes @ 0x6
   369                           
   370                           
   371                           ; 1 bytes @ 0x6
   372     0076                     	ds	1
   373     0077                     LCD_Write_String@i:
   374     0077                     LCD_Set_Cursor@high4:	
   375                           ; 1 bytes @ 0x7
   376                           
   377     0077                     ??_LCD_Write_String:	
   378                           ; 1 bytes @ 0x7
   379                           
   380                           
   381                           ; 1 bytes @ 0x7
   382     0077                     	ds	1
   383     0078                     LCD_Set_Cursor@low4:
   384                           
   385                           ; 1 bytes @ 0x8
   386     0078                     	ds	1
   387     0079                     LCD_Set_Cursor@temp:
   388                           
   389                           ; 1 bytes @ 0x9
   390     0079                     	ds	1
   391     007A                     ??_main:
   392                           
   393                           ; 1 bytes @ 0xA
   394     007A                     	ds	3
   395                           
   396                           	psect	cstackBANK0
   397     0020                     __pcstackBANK0:
   398     0020                     main@i:
   399                           
   400                           ; 2 bytes @ 0x0
   401     0020                     	ds	2
   402     0022                     main@i_63:
   403                           
   404                           ; 2 bytes @ 0x2
   405     0022                     	ds	2
   406                           
   407                           	psect	maintext
   408     077A                     __pmaintext:	
   409 ;;
   410 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   411 ;;
   412 ;; *************** function _main *****************
   413 ;; Defined at:
   414 ;;		line 13 in file "main.c"
   415 ;; Parameters:    Size  Location     Type
   416 ;;		None
   417 ;; Auto vars:     Size  Location     Type
   418 ;;  i               2    2[BANK0 ] int 
   419 ;;  i               2    0[BANK0 ] int 
   420 ;; Return value:  Size  Location     Type
   421 ;;                  1    wreg      void 
   422 ;; Registers used:
   423 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   424 ;; Tracked objects:
   425 ;;		On entry : B00/0
   426 ;;		On exit  : 0/0
   427 ;;		Unchanged: 0/0
   428 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   429 ;;      Params:         0       0       0       0       0
   430 ;;      Locals:         0       4       0       0       0
   431 ;;      Temps:          3       0       0       0       0
   432 ;;      Totals:         3       4       0       0       0
   433 ;;Total ram usage:        7 bytes
   434 ;; Hardware stack levels required when called: 3
   435 ;; This function calls:
   436 ;;		_LCD_Clear
   437 ;;		_LCD_Init
   438 ;;		_LCD_SL
   439 ;;		_LCD_SR
   440 ;;		_LCD_Set_Cursor
   441 ;;		_LCD_Write_String
   442 ;; This function is called by:
   443 ;;		Startup code after reset
   444 ;; This function uses a non-reentrant model
   445 ;;
   446                           
   447     077A                     _main:	
   448                           ;psect for function _main
   449                           
   450     077A                     l905:	
   451                           ;incstack = 0
   452                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   453                           
   454                           
   455                           ;main.c: 16:     LCD_Init();
   456     077A  120A  118A  2707  120A  118A  	fcall	_LCD_Init
   457                           
   458                           ;main.c: 17:     LCD_Clear();
   459     077F  120A  118A  25E2  120A  118A  	fcall	_LCD_Clear
   460                           
   461                           ;main.c: 18:     LCD_Set_Cursor(1,1);
   462     0784  01F4               	clrf	LCD_Set_Cursor@c
   463     0785  0AF4               	incf	LCD_Set_Cursor@c,f
   464     0786  3001               	movlw	1
   465     0787  120A  118A  266D  120A  118A  	fcall	_LCD_Set_Cursor
   466     078C                     l907:
   467                           
   468                           ;main.c: 19:     LCD_Write_String("DINHTIEN");
   469     078C  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   470     078D  00F6               	movwf	LCD_Write_String@str
   471     078E  120A  118A  2609  120A  118A  	fcall	_LCD_Write_String
   472     0793                     l909:
   473                           
   474                           ;main.c: 20:     LCD_Set_Cursor(2,3);
   475     0793  3003               	movlw	3
   476     0794  00F4               	movwf	LCD_Set_Cursor@c
   477     0795  3002               	movlw	2
   478     0796  120A  118A  266D  120A  118A  	fcall	_LCD_Set_Cursor
   479                           
   480                           ;main.c: 21:     LCD_Write_String("HCMUT");
   481     079B  300A               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   482     079C  00F6               	movwf	LCD_Write_String@str
   483     079D  120A  118A  2609  120A  118A  	fcall	_LCD_Write_String
   484     07A2                     l911:
   485                           
   486                           ;main.c: 24:     {;main.c: 25:         for(int i = 0; i < 8; i ++)
   487     07A2  1283               	bcf	3,5	;RP0=0, select bank0
   488     07A3  1303               	bcf	3,6	;RP1=0, select bank0
   489     07A4  01A0               	clrf	main@i
   490     07A5  01A1               	clrf	main@i+1
   491     07A6                     l917:
   492                           
   493                           ;main.c: 26:         {;main.c: 27:             _delay((unsigned long)((300)*(20000000/40
      +                          00.0)));
   494     07A6  3008               	movlw	8
   495     07A7  00FC               	movwf	??_main+2
   496     07A8  309D               	movlw	157
   497     07A9  00FB               	movwf	??_main+1
   498     07AA  3005               	movlw	5
   499     07AB  00FA               	movwf	??_main
   500     07AC                     u257:
   501     07AC  0BFA               	decfsz	??_main,f
   502     07AD  2FAC               	goto	u257
   503     07AE  0BFB               	decfsz	??_main+1,f
   504     07AF  2FAC               	goto	u257
   505     07B0  0BFC               	decfsz	??_main+2,f
   506     07B1  2FAC               	goto	u257
   507     07B2  2FB3               	nop2
   508     07B3                     l919:
   509                           
   510                           ;main.c: 28:             LCD_SR();
   511     07B3  120A  118A  25FC  120A  118A  	fcall	_LCD_SR
   512     07B8                     l921:
   513                           
   514                           ;main.c: 29:         }
   515     07B8  3001               	movlw	1
   516     07B9  1283               	bcf	3,5	;RP0=0, select bank0
   517     07BA  1303               	bcf	3,6	;RP1=0, select bank0
   518     07BB  07A0               	addwf	main@i,f
   519     07BC  1803               	skipnc
   520     07BD  0AA1               	incf	main@i+1,f
   521     07BE  3000               	movlw	0
   522     07BF  07A1               	addwf	main@i+1,f
   523     07C0                     l923:
   524     07C0  0821               	movf	main@i+1,w
   525     07C1  3A80               	xorlw	128
   526     07C2  00FF               	movwf	btemp+1
   527     07C3  3080               	movlw	128
   528     07C4  027F               	subwf	btemp+1,w
   529     07C5  1D03               	skipz
   530     07C6  2FC9               	goto	u235
   531     07C7  3008               	movlw	8
   532     07C8  0220               	subwf	main@i,w
   533     07C9                     u235:
   534     07C9  1C03               	skipc
   535     07CA  2FCC               	goto	u231
   536     07CB  2FCD               	goto	u230
   537     07CC                     u231:
   538     07CC  2FA6               	goto	l917
   539     07CD                     u230:
   540     07CD                     l925:
   541                           
   542                           ;main.c: 31:         for(int i = 0; i < 8; i ++)
   543     07CD  1283               	bcf	3,5	;RP0=0, select bank0
   544     07CE  1303               	bcf	3,6	;RP1=0, select bank0
   545     07CF  01A2               	clrf	main@i_63
   546     07D0  01A3               	clrf	main@i_63+1
   547     07D1                     l931:
   548                           
   549                           ;main.c: 32:         {;main.c: 33:             _delay((unsigned long)((300)*(20000000/40
      +                          00.0)));
   550     07D1  3008               	movlw	8
   551     07D2  00FC               	movwf	??_main+2
   552     07D3  309D               	movlw	157
   553     07D4  00FB               	movwf	??_main+1
   554     07D5  3005               	movlw	5
   555     07D6  00FA               	movwf	??_main
   556     07D7                     u267:
   557     07D7  0BFA               	decfsz	??_main,f
   558     07D8  2FD7               	goto	u267
   559     07D9  0BFB               	decfsz	??_main+1,f
   560     07DA  2FD7               	goto	u267
   561     07DB  0BFC               	decfsz	??_main+2,f
   562     07DC  2FD7               	goto	u267
   563     07DD  2FDE               	nop2
   564     07DE                     l933:
   565                           
   566                           ;main.c: 34:             LCD_SL();
   567     07DE  120A  118A  25EF  120A  118A  	fcall	_LCD_SL
   568     07E3                     l935:
   569                           
   570                           ;main.c: 35:         }
   571     07E3  3001               	movlw	1
   572     07E4  1283               	bcf	3,5	;RP0=0, select bank0
   573     07E5  1303               	bcf	3,6	;RP1=0, select bank0
   574     07E6  07A2               	addwf	main@i_63,f
   575     07E7  1803               	skipnc
   576     07E8  0AA3               	incf	main@i_63+1,f
   577     07E9  3000               	movlw	0
   578     07EA  07A3               	addwf	main@i_63+1,f
   579     07EB                     l937:
   580     07EB  0823               	movf	main@i_63+1,w
   581     07EC  3A80               	xorlw	128
   582     07ED  00FF               	movwf	btemp+1
   583     07EE  3080               	movlw	128
   584     07EF  027F               	subwf	btemp+1,w
   585     07F0  1D03               	skipz
   586     07F1  2FF4               	goto	u245
   587     07F2  3008               	movlw	8
   588     07F3  0222               	subwf	main@i_63,w
   589     07F4                     u245:
   590     07F4  1C03               	skipc
   591     07F5  2FF7               	goto	u241
   592     07F6  2FF8               	goto	u240
   593     07F7                     u241:
   594     07F7  2FD1               	goto	l931
   595     07F8                     u240:
   596     07F8  2FA2               	goto	l911
   597     07F9  120A  118A  2800   	ljmp	start
   598     07FC                     __end_of_main:
   599                           
   600                           	psect	text1
   601     0609                     __ptext1:	
   602 ;; *************** function _LCD_Write_String *****************
   603 ;; Defined at:
   604 ;;		line 108 in file "lcd.c"
   605 ;; Parameters:    Size  Location     Type
   606 ;;  str             1    6[COMMON] PTR unsigned char 
   607 ;;		 -> STR_2(6), STR_1(9), 
   608 ;; Auto vars:     Size  Location     Type
   609 ;;  i               1    7[COMMON] unsigned char 
   610 ;; Return value:  Size  Location     Type
   611 ;;                  1    wreg      void 
   612 ;; Registers used:
   613 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   614 ;; Tracked objects:
   615 ;;		On entry : 0/0
   616 ;;		On exit  : 0/0
   617 ;;		Unchanged: 0/0
   618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   619 ;;      Params:         1       0       0       0       0
   620 ;;      Locals:         1       0       0       0       0
   621 ;;      Temps:          0       0       0       0       0
   622 ;;      Totals:         2       0       0       0       0
   623 ;;Total ram usage:        2 bytes
   624 ;; Hardware stack levels used: 1
   625 ;; Hardware stack levels required when called: 2
   626 ;; This function calls:
   627 ;;		_LCD_Write_Char
   628 ;; This function is called by:
   629 ;;		_main
   630 ;; This function uses a non-reentrant model
   631 ;;
   632                           
   633     0609                     _LCD_Write_String:	
   634                           ;psect for function _LCD_Write_String
   635                           
   636     0609                     l893:	
   637                           ;incstack = 0
   638                           ; Regs used in _LCD_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   639                           
   640                           
   641                           ;lcd.c: 108: void LCD_Write_String(char* str);lcd.c: 109: {;lcd.c: 110:     unsigned cha
      +                          r i = 0;
   642     0609  01F7               	clrf	LCD_Write_String@i
   643                           
   644                           ;lcd.c: 111:     while(str[i] != '\0')
   645     060A  2E1A               	goto	l899
   646     060B                     l895:
   647                           
   648                           ;lcd.c: 112:     {;lcd.c: 113:         LCD_Write_Char(str[i++]);
   649     060B  0877               	movf	LCD_Write_String@i,w
   650     060C  0776               	addwf	LCD_Write_String@str,w
   651     060D  0084               	movwf	4
   652     060E  120A  118A  2003  120A  118A  	fcall	stringdir
   653     0613  120A  118A  26B5  120A  118A  	fcall	_LCD_Write_Char
   654     0618                     l897:
   655     0618  3001               	movlw	1
   656     0619  07F7               	addwf	LCD_Write_String@i,f
   657     061A                     l899:
   658                           
   659                           ;lcd.c: 111:     while(str[i] != '\0')
   660     061A  0877               	movf	LCD_Write_String@i,w
   661     061B  0776               	addwf	LCD_Write_String@str,w
   662     061C  0084               	movwf	4
   663     061D  120A  118A  2003  120A  118A  	fcall	stringdir
   664     0622  3A00               	xorlw	0
   665     0623  1D03               	skipz
   666     0624  2E26               	goto	u221
   667     0625  2E27               	goto	u220
   668     0626                     u221:
   669     0626  2E0B               	goto	l895
   670     0627                     u220:
   671     0627                     l69:
   672     0627  0008               	return
   673     0628                     __end_of_LCD_Write_String:
   674                           
   675                           	psect	text2
   676     06B5                     __ptext2:	
   677 ;; *************** function _LCD_Write_Char *****************
   678 ;; Defined at:
   679 ;;		line 86 in file "lcd.c"
   680 ;; Parameters:    Size  Location     Type
   681 ;;  data            1    wreg     unsigned char 
   682 ;; Auto vars:     Size  Location     Type
   683 ;;  data            1    5[COMMON] unsigned char 
   684 ;;  low4            1    4[COMMON] unsigned char 
   685 ;;  high4           1    3[COMMON] unsigned char 
   686 ;; Return value:  Size  Location     Type
   687 ;;                  1    wreg      void 
   688 ;; Registers used:
   689 ;;		wreg, status,2, status,0, pclath, cstack
   690 ;; Tracked objects:
   691 ;;		On entry : 0/0
   692 ;;		On exit  : 0/0
   693 ;;		Unchanged: 0/0
   694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   695 ;;      Params:         0       0       0       0       0
   696 ;;      Locals:         3       0       0       0       0
   697 ;;      Temps:          2       0       0       0       0
   698 ;;      Totals:         5       0       0       0       0
   699 ;;Total ram usage:        5 bytes
   700 ;; Hardware stack levels used: 1
   701 ;; Hardware stack levels required when called: 1
   702 ;; This function calls:
   703 ;;		_LCD_DATA
   704 ;; This function is called by:
   705 ;;		_LCD_Write_String
   706 ;; This function uses a non-reentrant model
   707 ;;
   708                           
   709     06B5                     _LCD_Write_Char:	
   710                           ;psect for function _LCD_Write_Char
   711                           
   712                           
   713                           ;incstack = 0
   714                           ; Regs used in _LCD_Write_Char: [wreg+status,2+status,0+pclath+cstack]
   715                           ;LCD_Write_Char@data stored from wreg
   716     06B5  00F5               	movwf	LCD_Write_Char@data
   717     06B6                     l801:
   718                           
   719                           ;lcd.c: 86: void LCD_Write_Char(char data);lcd.c: 87: {;lcd.c: 88:     char low4, high4;
      +                          ;lcd.c: 89:     high4 = data >> 4;
   720     06B6  0875               	movf	LCD_Write_Char@data,w
   721     06B7  00F1               	movwf	??_LCD_Write_Char
   722     06B8  3004               	movlw	4
   723     06B9                     u175:
   724     06B9  1003               	clrc
   725     06BA  0CF1               	rrf	??_LCD_Write_Char,f
   726     06BB  3EFF               	addlw	-1
   727     06BC  1D03               	skipz
   728     06BD  2EB9               	goto	u175
   729     06BE  0871               	movf	??_LCD_Write_Char,w
   730     06BF  00F3               	movwf	LCD_Write_Char@high4
   731     06C0                     l803:
   732                           
   733                           ;lcd.c: 90:     low4 = data & 0x0f;
   734     06C0  0875               	movf	LCD_Write_Char@data,w
   735     06C1  00F4               	movwf	LCD_Write_Char@low4
   736     06C2                     l805:
   737     06C2  300F               	movlw	15
   738     06C3  05F4               	andwf	LCD_Write_Char@low4,f
   739     06C4                     l807:
   740                           
   741                           ;lcd.c: 92:     PORTBbits.RB4 = 1;
   742     06C4  1283               	bcf	3,5	;RP0=0, select bank0
   743     06C5  1303               	bcf	3,6	;RP1=0, select bank0
   744     06C6  1606               	bsf	6,4	;volatile
   745     06C7                     l809:
   746                           
   747                           ;lcd.c: 93:     LCD_DATA(high4);
   748     06C7  0873               	movf	LCD_Write_Char@high4,w
   749     06C8  120A  118A  2628  120A  118A  	fcall	_LCD_DATA
   750     06CD                     l811:
   751                           
   752                           ;lcd.c: 94:     PORTBbits.RB5 = 1;
   753     06CD  1283               	bcf	3,5	;RP0=0, select bank0
   754     06CE  1303               	bcf	3,6	;RP1=0, select bank0
   755     06CF  1686               	bsf	6,5	;volatile
   756     06D0                     l813:
   757                           
   758                           ;lcd.c: 95:     _delay((unsigned long)((500)*(20000000/4000000.0)));
   759     06D0  3004               	movlw	4
   760     06D1  00F2               	movwf	??_LCD_Write_Char+1
   761     06D2  303D               	movlw	61
   762     06D3  00F1               	movwf	??_LCD_Write_Char
   763     06D4                     u277:
   764     06D4  0BF1               	decfsz	??_LCD_Write_Char,f
   765     06D5  2ED4               	goto	u277
   766     06D6  0BF2               	decfsz	??_LCD_Write_Char+1,f
   767     06D7  2ED4               	goto	u277
   768     06D8  2ED9               	nop2
   769     06D9                     l815:
   770                           
   771                           ;lcd.c: 96:     PORTBbits.RB5 = 0;
   772     06D9  1283               	bcf	3,5	;RP0=0, select bank0
   773     06DA  1303               	bcf	3,6	;RP1=0, select bank0
   774     06DB  1286               	bcf	6,5	;volatile
   775     06DC                     l817:
   776                           
   777                           ;lcd.c: 97:     _delay((unsigned long)((500)*(20000000/4000000.0)));
   778     06DC  3004               	movlw	4
   779     06DD  00F2               	movwf	??_LCD_Write_Char+1
   780     06DE  303D               	movlw	61
   781     06DF  00F1               	movwf	??_LCD_Write_Char
   782     06E0                     u287:
   783     06E0  0BF1               	decfsz	??_LCD_Write_Char,f
   784     06E1  2EE0               	goto	u287
   785     06E2  0BF2               	decfsz	??_LCD_Write_Char+1,f
   786     06E3  2EE0               	goto	u287
   787     06E4  2EE5               	nop2
   788     06E5                     l819:
   789                           
   790                           ;lcd.c: 99:     PORTBbits.RB4 = 1;
   791     06E5  1283               	bcf	3,5	;RP0=0, select bank0
   792     06E6  1303               	bcf	3,6	;RP1=0, select bank0
   793     06E7  1606               	bsf	6,4	;volatile
   794     06E8                     l821:
   795                           
   796                           ;lcd.c: 100:     LCD_DATA(low4);
   797     06E8  0874               	movf	LCD_Write_Char@low4,w
   798     06E9  120A  118A  2628  120A  118A  	fcall	_LCD_DATA
   799     06EE                     l823:
   800                           
   801                           ;lcd.c: 101:     PORTBbits.RB5 = 1;
   802     06EE  1283               	bcf	3,5	;RP0=0, select bank0
   803     06EF  1303               	bcf	3,6	;RP1=0, select bank0
   804     06F0  1686               	bsf	6,5	;volatile
   805                           
   806                           ;lcd.c: 102:     _delay((unsigned long)((500)*(20000000/4000000.0)));
   807     06F1  3004               	movlw	4
   808     06F2  00F2               	movwf	??_LCD_Write_Char+1
   809     06F3  303D               	movlw	61
   810     06F4  00F1               	movwf	??_LCD_Write_Char
   811     06F5                     u297:
   812     06F5  0BF1               	decfsz	??_LCD_Write_Char,f
   813     06F6  2EF5               	goto	u297
   814     06F7  0BF2               	decfsz	??_LCD_Write_Char+1,f
   815     06F8  2EF5               	goto	u297
   816     06F9  2EFA               	nop2
   817     06FA                     l825:
   818                           
   819                           ;lcd.c: 103:     PORTBbits.RB5 = 0;
   820     06FA  1283               	bcf	3,5	;RP0=0, select bank0
   821     06FB  1303               	bcf	3,6	;RP1=0, select bank0
   822     06FC  1286               	bcf	6,5	;volatile
   823                           
   824                           ;lcd.c: 104:     _delay((unsigned long)((500)*(20000000/4000000.0)));
   825     06FD  3004               	movlw	4
   826     06FE  00F2               	movwf	??_LCD_Write_Char+1
   827     06FF  303D               	movlw	61
   828     0700  00F1               	movwf	??_LCD_Write_Char
   829     0701                     u307:
   830     0701  0BF1               	decfsz	??_LCD_Write_Char,f
   831     0702  2F01               	goto	u307
   832     0703  0BF2               	decfsz	??_LCD_Write_Char+1,f
   833     0704  2F01               	goto	u307
   834     0705  2F06               	nop2
   835     0706                     l63:
   836     0706  0008               	return
   837     0707                     __end_of_LCD_Write_Char:
   838                           
   839                           	psect	text3
   840     066D                     __ptext3:	
   841 ;; *************** function _LCD_Set_Cursor *****************
   842 ;; Defined at:
   843 ;;		line 117 in file "lcd.c"
   844 ;; Parameters:    Size  Location     Type
   845 ;;  r               1    wreg     unsigned char 
   846 ;;  c               1    4[COMMON] unsigned char 
   847 ;; Auto vars:     Size  Location     Type
   848 ;;  r               1    6[COMMON] unsigned char 
   849 ;;  temp            1    9[COMMON] unsigned char 
   850 ;;  low4            1    8[COMMON] unsigned char 
   851 ;;  high4           1    7[COMMON] unsigned char 
   852 ;; Return value:  Size  Location     Type
   853 ;;                  1    wreg      void 
   854 ;; Registers used:
   855 ;;		wreg, status,2, status,0, pclath, cstack
   856 ;; Tracked objects:
   857 ;;		On entry : 0/0
   858 ;;		On exit  : 0/0
   859 ;;		Unchanged: 0/0
   860 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   861 ;;      Params:         1       0       0       0       0
   862 ;;      Locals:         4       0       0       0       0
   863 ;;      Temps:          1       0       0       0       0
   864 ;;      Totals:         6       0       0       0       0
   865 ;;Total ram usage:        6 bytes
   866 ;; Hardware stack levels used: 1
   867 ;; Hardware stack levels required when called: 2
   868 ;; This function calls:
   869 ;;		_LCD_CMD
   870 ;; This function is called by:
   871 ;;		_main
   872 ;; This function uses a non-reentrant model
   873 ;;
   874                           
   875     066D                     _LCD_Set_Cursor:	
   876                           ;psect for function _LCD_Set_Cursor
   877                           
   878                           
   879                           ;incstack = 0
   880                           ; Regs used in _LCD_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
   881                           ;LCD_Set_Cursor@r stored from wreg
   882     066D  00F6               	movwf	LCD_Set_Cursor@r
   883     066E                     l869:
   884                           
   885                           ;lcd.c: 117: void LCD_Set_Cursor(unsigned char r, unsigned char c);lcd.c: 118: {;lcd.c: 
      +                          119:     unsigned char temp, high4, low4;;lcd.c: 120:     if (r == 1)
   886     066E  0376               	decf	LCD_Set_Cursor@r,w
   887     066F  1D03               	btfss	3,2
   888     0670  2E72               	goto	u181
   889     0671  2E73               	goto	u180
   890     0672                     u181:
   891     0672  2E91               	goto	l881
   892     0673                     u180:
   893     0673                     l871:
   894                           
   895                           ;lcd.c: 121:     {;lcd.c: 122:         temp = 0x80 + c - 1;
   896     0673  0874               	movf	LCD_Set_Cursor@c,w
   897     0674  3E7F               	addlw	127
   898     0675  00F9               	movwf	LCD_Set_Cursor@temp
   899                           
   900                           ;lcd.c: 123:         high4 = temp >> 4;
   901     0676  0879               	movf	LCD_Set_Cursor@temp,w
   902     0677  00F5               	movwf	??_LCD_Set_Cursor
   903     0678  3004               	movlw	4
   904     0679                     u195:
   905     0679  1003               	clrc
   906     067A  0CF5               	rrf	??_LCD_Set_Cursor,f
   907     067B  3EFF               	addlw	-1
   908     067C  1D03               	skipz
   909     067D  2E79               	goto	u195
   910     067E  0875               	movf	??_LCD_Set_Cursor,w
   911     067F  00F7               	movwf	LCD_Set_Cursor@high4
   912     0680                     l873:
   913                           
   914                           ;lcd.c: 124:         low4 = temp & 0x0f;
   915     0680  0879               	movf	LCD_Set_Cursor@temp,w
   916     0681  00F8               	movwf	LCD_Set_Cursor@low4
   917     0682                     l875:
   918     0682  300F               	movlw	15
   919     0683  05F8               	andwf	LCD_Set_Cursor@low4,f
   920     0684                     l877:
   921                           
   922                           ;lcd.c: 125:         LCD_CMD(high4);
   923     0684  0877               	movf	LCD_Set_Cursor@high4,w
   924     0685  120A  118A  264A  120A  118A  	fcall	_LCD_CMD
   925     068A                     l879:
   926                           
   927                           ;lcd.c: 126:         LCD_CMD(low4);
   928     068A  0878               	movf	LCD_Set_Cursor@low4,w
   929     068B  120A  118A  264A  120A  118A  	fcall	_LCD_CMD
   930                           
   931                           ;lcd.c: 127:     }
   932     0690  2EB4               	goto	l75
   933     0691                     l881:
   934     0691  3002               	movlw	2
   935     0692  0676               	xorwf	LCD_Set_Cursor@r,w
   936     0693  1D03               	btfss	3,2
   937     0694  2E96               	goto	u201
   938     0695  2E97               	goto	u200
   939     0696                     u201:
   940     0696  2EB4               	goto	l75
   941     0697                     u200:
   942     0697                     l883:
   943                           
   944                           ;lcd.c: 130:     {;lcd.c: 131:         temp = 0xc0 + c - 1;
   945     0697  0874               	movf	LCD_Set_Cursor@c,w
   946     0698  3EBF               	addlw	191
   947     0699  00F9               	movwf	LCD_Set_Cursor@temp
   948                           
   949                           ;lcd.c: 132:         high4 = temp >> 4;
   950     069A  0879               	movf	LCD_Set_Cursor@temp,w
   951     069B  00F5               	movwf	??_LCD_Set_Cursor
   952     069C  3004               	movlw	4
   953     069D                     u215:
   954     069D  1003               	clrc
   955     069E  0CF5               	rrf	??_LCD_Set_Cursor,f
   956     069F  3EFF               	addlw	-1
   957     06A0  1D03               	skipz
   958     06A1  2E9D               	goto	u215
   959     06A2  0875               	movf	??_LCD_Set_Cursor,w
   960     06A3  00F7               	movwf	LCD_Set_Cursor@high4
   961     06A4                     l885:
   962                           
   963                           ;lcd.c: 133:         low4 = temp & 0x0f;
   964     06A4  0879               	movf	LCD_Set_Cursor@temp,w
   965     06A5  00F8               	movwf	LCD_Set_Cursor@low4
   966     06A6                     l887:
   967     06A6  300F               	movlw	15
   968     06A7  05F8               	andwf	LCD_Set_Cursor@low4,f
   969     06A8                     l889:
   970                           
   971                           ;lcd.c: 134:         LCD_CMD(high4);
   972     06A8  0877               	movf	LCD_Set_Cursor@high4,w
   973     06A9  120A  118A  264A  120A  118A  	fcall	_LCD_CMD
   974     06AE                     l891:
   975                           
   976                           ;lcd.c: 135:         LCD_CMD(low4);
   977     06AE  0878               	movf	LCD_Set_Cursor@low4,w
   978     06AF  120A  118A  264A  120A  118A  	fcall	_LCD_CMD
   979     06B4                     l75:
   980     06B4  0008               	return
   981     06B5                     __end_of_LCD_Set_Cursor:
   982                           
   983                           	psect	text4
   984     05FC                     __ptext4:	
   985 ;; *************** function _LCD_SR *****************
   986 ;; Defined at:
   987 ;;		line 74 in file "lcd.c"
   988 ;; Parameters:    Size  Location     Type
   989 ;;		None
   990 ;; Auto vars:     Size  Location     Type
   991 ;;		None
   992 ;; Return value:  Size  Location     Type
   993 ;;                  1    wreg      void 
   994 ;; Registers used:
   995 ;;		wreg, status,2, status,0, pclath, cstack
   996 ;; Tracked objects:
   997 ;;		On entry : 0/0
   998 ;;		On exit  : 0/0
   999 ;;		Unchanged: 0/0
  1000 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1001 ;;      Params:         0       0       0       0       0
  1002 ;;      Locals:         0       0       0       0       0
  1003 ;;      Temps:          0       0       0       0       0
  1004 ;;      Totals:         0       0       0       0       0
  1005 ;;Total ram usage:        0 bytes
  1006 ;; Hardware stack levels used: 1
  1007 ;; Hardware stack levels required when called: 2
  1008 ;; This function calls:
  1009 ;;		_LCD_CMD
  1010 ;; This function is called by:
  1011 ;;		_main
  1012 ;; This function uses a non-reentrant model
  1013 ;;
  1014                           
  1015     05FC                     _LCD_SR:	
  1016                           ;psect for function _LCD_SR
  1017                           
  1018     05FC                     l901:	
  1019                           ;incstack = 0
  1020                           ; Regs used in _LCD_SR: [wreg+status,2+status,0+pclath+cstack]
  1021                           
  1022                           
  1023                           ;lcd.c: 76:     LCD_CMD(0x01);
  1024     05FC  3001               	movlw	1
  1025     05FD  120A  118A  264A  120A  118A  	fcall	_LCD_CMD
  1026                           
  1027                           ;lcd.c: 77:     LCD_CMD(0x0c);
  1028     0602  300C               	movlw	12
  1029     0603  120A  118A  264A  120A  118A  	fcall	_LCD_CMD
  1030     0608                     l57:
  1031     0608  0008               	return
  1032     0609                     __end_of_LCD_SR:
  1033                           
  1034                           	psect	text5
  1035     05EF                     __ptext5:	
  1036 ;; *************** function _LCD_SL *****************
  1037 ;; Defined at:
  1038 ;;		line 68 in file "lcd.c"
  1039 ;; Parameters:    Size  Location     Type
  1040 ;;		None
  1041 ;; Auto vars:     Size  Location     Type
  1042 ;;		None
  1043 ;; Return value:  Size  Location     Type
  1044 ;;                  1    wreg      void 
  1045 ;; Registers used:
  1046 ;;		wreg, status,2, status,0, pclath, cstack
  1047 ;; Tracked objects:
  1048 ;;		On entry : 0/0
  1049 ;;		On exit  : 0/0
  1050 ;;		Unchanged: 0/0
  1051 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1052 ;;      Params:         0       0       0       0       0
  1053 ;;      Locals:         0       0       0       0       0
  1054 ;;      Temps:          0       0       0       0       0
  1055 ;;      Totals:         0       0       0       0       0
  1056 ;;Total ram usage:        0 bytes
  1057 ;; Hardware stack levels used: 1
  1058 ;; Hardware stack levels required when called: 2
  1059 ;; This function calls:
  1060 ;;		_LCD_CMD
  1061 ;; This function is called by:
  1062 ;;		_main
  1063 ;; This function uses a non-reentrant model
  1064 ;;
  1065                           
  1066     05EF                     _LCD_SL:	
  1067                           ;psect for function _LCD_SL
  1068                           
  1069     05EF                     l903:	
  1070                           ;incstack = 0
  1071                           ; Regs used in _LCD_SL: [wreg+status,2+status,0+pclath+cstack]
  1072                           
  1073                           
  1074                           ;lcd.c: 70:     LCD_CMD(0x01);
  1075     05EF  3001               	movlw	1
  1076     05F0  120A  118A  264A  120A  118A  	fcall	_LCD_CMD
  1077                           
  1078                           ;lcd.c: 71:     LCD_CMD(0x08);
  1079     05F5  3008               	movlw	8
  1080     05F6  120A  118A  264A  120A  118A  	fcall	_LCD_CMD
  1081     05FB                     l54:
  1082     05FB  0008               	return
  1083     05FC                     __end_of_LCD_SL:
  1084                           
  1085                           	psect	text6
  1086     0707                     __ptext6:	
  1087 ;; *************** function _LCD_Init *****************
  1088 ;; Defined at:
  1089 ;;		line 35 in file "lcd.c"
  1090 ;; Parameters:    Size  Location     Type
  1091 ;;		None
  1092 ;; Auto vars:     Size  Location     Type
  1093 ;;		None
  1094 ;; Return value:  Size  Location     Type
  1095 ;;                  1    wreg      void 
  1096 ;; Registers used:
  1097 ;;		wreg, status,2, status,0, pclath, cstack
  1098 ;; Tracked objects:
  1099 ;;		On entry : 0/0
  1100 ;;		On exit  : 0/0
  1101 ;;		Unchanged: 0/0
  1102 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1103 ;;      Params:         0       0       0       0       0
  1104 ;;      Locals:         0       0       0       0       0
  1105 ;;      Temps:          2       0       0       0       0
  1106 ;;      Totals:         2       0       0       0       0
  1107 ;;Total ram usage:        2 bytes
  1108 ;; Hardware stack levels used: 1
  1109 ;; Hardware stack levels required when called: 2
  1110 ;; This function calls:
  1111 ;;		_LCD_CMD
  1112 ;;		_LCD_DATA
  1113 ;; This function is called by:
  1114 ;;		_main
  1115 ;; This function uses a non-reentrant model
  1116 ;;
  1117                           
  1118     0707                     _LCD_Init:	
  1119                           ;psect for function _LCD_Init
  1120                           
  1121     0707                     l827:	
  1122                           ;incstack = 0
  1123                           ; Regs used in _LCD_Init: [wreg+status,2+status,0+pclath+cstack]
  1124                           
  1125                           
  1126                           ;lcd.c: 37:     TRISB = 0;
  1127     0707  1683               	bsf	3,5	;RP0=1, select bank1
  1128     0708  1303               	bcf	3,6	;RP1=0, select bank1
  1129     0709  0186               	clrf	6	;volatile
  1130     070A                     l829:
  1131                           
  1132                           ;lcd.c: 38:     TRISBbits.TRISB4 = 0;
  1133     070A  1206               	bcf	6,4	;volatile
  1134     070B                     l831:
  1135                           
  1136                           ;lcd.c: 39:     TRISBbits.TRISB5 = 0;
  1137     070B  1286               	bcf	6,5	;volatile
  1138     070C                     l833:
  1139                           
  1140                           ;lcd.c: 42:     LCD_DATA(0);
  1141     070C  3000               	movlw	0
  1142     070D  120A  118A  2628  120A  118A  	fcall	_LCD_DATA
  1143     0712                     l835:
  1144                           
  1145                           ;lcd.c: 43:     _delay((unsigned long)((30)*(20000000/4000.0)));
  1146     0712  30C3               	movlw	195
  1147     0713  00F5               	movwf	??_LCD_Init+1
  1148     0714  30CD               	movlw	205
  1149     0715  00F4               	movwf	??_LCD_Init
  1150     0716                     u317:
  1151     0716  0BF4               	decfsz	??_LCD_Init,f
  1152     0717  2F16               	goto	u317
  1153     0718  0BF5               	decfsz	??_LCD_Init+1,f
  1154     0719  2F16               	goto	u317
  1155     071A                     l837:
  1156                           
  1157                           ;lcd.c: 44:     _delay((unsigned long)((500)*(20000000/4000000.0)));
  1158     071A  3004               	movlw	4
  1159     071B  00F5               	movwf	??_LCD_Init+1
  1160     071C  303D               	movlw	61
  1161     071D  00F4               	movwf	??_LCD_Init
  1162     071E                     u327:
  1163     071E  0BF4               	decfsz	??_LCD_Init,f
  1164     071F  2F1E               	goto	u327
  1165     0720  0BF5               	decfsz	??_LCD_Init+1,f
  1166     0721  2F1E               	goto	u327
  1167     0722  2F23               	nop2
  1168     0723                     l839:
  1169                           
  1170                           ;lcd.c: 46:     LCD_CMD(0x03);
  1171     0723  3003               	movlw	3
  1172     0724  120A  118A  264A  120A  118A  	fcall	_LCD_CMD
  1173     0729                     l841:
  1174                           
  1175                           ;lcd.c: 47:     _delay((unsigned long)((5)*(20000000/4000.0)));
  1176     0729  3021               	movlw	33
  1177     072A  00F5               	movwf	??_LCD_Init+1
  1178     072B  3076               	movlw	118
  1179     072C  00F4               	movwf	??_LCD_Init
  1180     072D                     u337:
  1181     072D  0BF4               	decfsz	??_LCD_Init,f
  1182     072E  2F2D               	goto	u337
  1183     072F  0BF5               	decfsz	??_LCD_Init+1,f
  1184     0730  2F2D               	goto	u337
  1185     0731  0000               	nop
  1186     0732                     l843:
  1187                           
  1188                           ;lcd.c: 48:     LCD_CMD(0x03);
  1189     0732  3003               	movlw	3
  1190     0733  120A  118A  264A  120A  118A  	fcall	_LCD_CMD
  1191     0738                     l845:
  1192                           
  1193                           ;lcd.c: 49:     _delay((unsigned long)((150)*(20000000/4000000.0)));
  1194     0738  30F9               	movlw	249
  1195     0739  00F4               	movwf	??_LCD_Init
  1196     073A                     u347:
  1197     073A  0BF4               	decfsz	??_LCD_Init,f
  1198     073B  2F3A               	goto	u347
  1199     073C  2F3D               	nop2
  1200     073D                     l847:
  1201                           
  1202                           ;lcd.c: 50:     LCD_CMD(0x03);
  1203     073D  3003               	movlw	3
  1204     073E  120A  118A  264A  120A  118A  	fcall	_LCD_CMD
  1205     0743                     l849:
  1206                           
  1207                           ;lcd.c: 52:     LCD_CMD(0x02);
  1208     0743  3002               	movlw	2
  1209     0744  120A  118A  264A  120A  118A  	fcall	_LCD_CMD
  1210     0749                     l851:
  1211                           
  1212                           ;lcd.c: 54:     LCD_CMD(0x02);
  1213     0749  3002               	movlw	2
  1214     074A  120A  118A  264A  120A  118A  	fcall	_LCD_CMD
  1215     074F                     l853:
  1216                           
  1217                           ;lcd.c: 55:     LCD_CMD(0x08);
  1218     074F  3008               	movlw	8
  1219     0750  120A  118A  264A  120A  118A  	fcall	_LCD_CMD
  1220     0755                     l855:
  1221                           
  1222                           ;lcd.c: 57:     LCD_CMD(0x00);
  1223     0755  3000               	movlw	0
  1224     0756  120A  118A  264A  120A  118A  	fcall	_LCD_CMD
  1225     075B                     l857:
  1226                           
  1227                           ;lcd.c: 58:     LCD_CMD(0x0c);
  1228     075B  300C               	movlw	12
  1229     075C  120A  118A  264A  120A  118A  	fcall	_LCD_CMD
  1230     0761                     l859:
  1231                           
  1232                           ;lcd.c: 60:     LCD_CMD(0x00);
  1233     0761  3000               	movlw	0
  1234     0762  120A  118A  264A  120A  118A  	fcall	_LCD_CMD
  1235     0767                     l861:
  1236                           
  1237                           ;lcd.c: 61:     LCD_CMD(0x01);
  1238     0767  3001               	movlw	1
  1239     0768  120A  118A  264A  120A  118A  	fcall	_LCD_CMD
  1240     076D                     l863:
  1241                           
  1242                           ;lcd.c: 63:     LCD_CMD(0x00);
  1243     076D  3000               	movlw	0
  1244     076E  120A  118A  264A  120A  118A  	fcall	_LCD_CMD
  1245     0773                     l865:
  1246                           
  1247                           ;lcd.c: 64:     LCD_CMD(0x06);
  1248     0773  3006               	movlw	6
  1249     0774  120A  118A  264A  120A  118A  	fcall	_LCD_CMD
  1250     0779                     l51:
  1251     0779  0008               	return
  1252     077A                     __end_of_LCD_Init:
  1253                           
  1254                           	psect	text7
  1255     05E2                     __ptext7:	
  1256 ;; *************** function _LCD_Clear *****************
  1257 ;; Defined at:
  1258 ;;		line 80 in file "lcd.c"
  1259 ;; Parameters:    Size  Location     Type
  1260 ;;		None
  1261 ;; Auto vars:     Size  Location     Type
  1262 ;;		None
  1263 ;; Return value:  Size  Location     Type
  1264 ;;                  1    wreg      void 
  1265 ;; Registers used:
  1266 ;;		wreg, status,2, status,0, pclath, cstack
  1267 ;; Tracked objects:
  1268 ;;		On entry : 0/0
  1269 ;;		On exit  : 0/0
  1270 ;;		Unchanged: 0/0
  1271 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1272 ;;      Params:         0       0       0       0       0
  1273 ;;      Locals:         0       0       0       0       0
  1274 ;;      Temps:          0       0       0       0       0
  1275 ;;      Totals:         0       0       0       0       0
  1276 ;;Total ram usage:        0 bytes
  1277 ;; Hardware stack levels used: 1
  1278 ;; Hardware stack levels required when called: 2
  1279 ;; This function calls:
  1280 ;;		_LCD_CMD
  1281 ;; This function is called by:
  1282 ;;		_main
  1283 ;; This function uses a non-reentrant model
  1284 ;;
  1285                           
  1286     05E2                     _LCD_Clear:	
  1287                           ;psect for function _LCD_Clear
  1288                           
  1289     05E2                     l867:	
  1290                           ;incstack = 0
  1291                           ; Regs used in _LCD_Clear: [wreg+status,2+status,0+pclath+cstack]
  1292                           
  1293                           
  1294                           ;lcd.c: 82:     LCD_CMD(0x00);
  1295     05E2  3000               	movlw	0
  1296     05E3  120A  118A  264A  120A  118A  	fcall	_LCD_CMD
  1297                           
  1298                           ;lcd.c: 83:     LCD_CMD(0x01);
  1299     05E8  3001               	movlw	1
  1300     05E9  120A  118A  264A  120A  118A  	fcall	_LCD_CMD
  1301     05EE                     l60:
  1302     05EE  0008               	return
  1303     05EF                     __end_of_LCD_Clear:
  1304                           
  1305                           	psect	text8
  1306     064A                     __ptext8:	
  1307 ;; *************** function _LCD_CMD *****************
  1308 ;; Defined at:
  1309 ;;		line 20 in file "lcd.c"
  1310 ;; Parameters:    Size  Location     Type
  1311 ;;  cmd             1    wreg     unsigned char 
  1312 ;; Auto vars:     Size  Location     Type
  1313 ;;  cmd             1    3[COMMON] unsigned char 
  1314 ;; Return value:  Size  Location     Type
  1315 ;;                  1    wreg      void 
  1316 ;; Registers used:
  1317 ;;		wreg, status,2, status,0, pclath, cstack
  1318 ;; Tracked objects:
  1319 ;;		On entry : 0/0
  1320 ;;		On exit  : 0/0
  1321 ;;		Unchanged: 0/0
  1322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1323 ;;      Params:         0       0       0       0       0
  1324 ;;      Locals:         1       0       0       0       0
  1325 ;;      Temps:          2       0       0       0       0
  1326 ;;      Totals:         3       0       0       0       0
  1327 ;;Total ram usage:        3 bytes
  1328 ;; Hardware stack levels used: 1
  1329 ;; Hardware stack levels required when called: 1
  1330 ;; This function calls:
  1331 ;;		_LCD_DATA
  1332 ;; This function is called by:
  1333 ;;		_LCD_Init
  1334 ;;		_LCD_SL
  1335 ;;		_LCD_SR
  1336 ;;		_LCD_Clear
  1337 ;;		_LCD_Set_Cursor
  1338 ;; This function uses a non-reentrant model
  1339 ;;
  1340                           
  1341     064A                     _LCD_CMD:	
  1342                           ;psect for function _LCD_CMD
  1343                           
  1344                           
  1345                           ;incstack = 0
  1346                           ; Regs used in _LCD_CMD: [wreg+status,2+status,0+pclath+cstack]
  1347                           ;LCD_CMD@cmd stored from wreg
  1348     064A  00F3               	movwf	LCD_CMD@cmd
  1349     064B                     l789:
  1350                           
  1351                           ;lcd.c: 20: void LCD_CMD(unsigned char cmd);lcd.c: 21: {;lcd.c: 23:     PORTBbits.RB4 = 
      +                          0;
  1352     064B  1283               	bcf	3,5	;RP0=0, select bank0
  1353     064C  1303               	bcf	3,6	;RP1=0, select bank0
  1354     064D  1206               	bcf	6,4	;volatile
  1355     064E                     l791:
  1356                           
  1357                           ;lcd.c: 25:     LCD_DATA(cmd);
  1358     064E  0873               	movf	LCD_CMD@cmd,w
  1359     064F  120A  118A  2628  120A  118A  	fcall	_LCD_DATA
  1360     0654                     l793:
  1361                           
  1362                           ;lcd.c: 27:     PORTBbits.RB5 = 1;
  1363     0654  1283               	bcf	3,5	;RP0=0, select bank0
  1364     0655  1303               	bcf	3,6	;RP1=0, select bank0
  1365     0656  1686               	bsf	6,5	;volatile
  1366     0657                     l795:
  1367                           
  1368                           ;lcd.c: 28:     _delay((unsigned long)((500)*(20000000/4000000.0)));
  1369     0657  3004               	movlw	4
  1370     0658  00F2               	movwf	??_LCD_CMD+1
  1371     0659  303D               	movlw	61
  1372     065A  00F1               	movwf	??_LCD_CMD
  1373     065B                     u357:
  1374     065B  0BF1               	decfsz	??_LCD_CMD,f
  1375     065C  2E5B               	goto	u357
  1376     065D  0BF2               	decfsz	??_LCD_CMD+1,f
  1377     065E  2E5B               	goto	u357
  1378     065F  2E60               	nop2
  1379     0660                     l797:
  1380                           
  1381                           ;lcd.c: 29:     PORTBbits.RB5 = 0;
  1382     0660  1283               	bcf	3,5	;RP0=0, select bank0
  1383     0661  1303               	bcf	3,6	;RP1=0, select bank0
  1384     0662  1286               	bcf	6,5	;volatile
  1385     0663                     l799:
  1386                           
  1387                           ;lcd.c: 30:     _delay((unsigned long)((500)*(20000000/4000000.0)));
  1388     0663  3004               	movlw	4
  1389     0664  00F2               	movwf	??_LCD_CMD+1
  1390     0665  303D               	movlw	61
  1391     0666  00F1               	movwf	??_LCD_CMD
  1392     0667                     u367:
  1393     0667  0BF1               	decfsz	??_LCD_CMD,f
  1394     0668  2E67               	goto	u367
  1395     0669  0BF2               	decfsz	??_LCD_CMD+1,f
  1396     066A  2E67               	goto	u367
  1397     066B  2E6C               	nop2
  1398     066C                     l48:
  1399     066C  0008               	return
  1400     066D                     __end_of_LCD_CMD:
  1401                           
  1402                           	psect	text9
  1403     0628                     __ptext9:	
  1404 ;; *************** function _LCD_DATA *****************
  1405 ;; Defined at:
  1406 ;;		line 4 in file "lcd.c"
  1407 ;; Parameters:    Size  Location     Type
  1408 ;;  data            1    wreg     unsigned char 
  1409 ;; Auto vars:     Size  Location     Type
  1410 ;;  data            1    0[COMMON] unsigned char 
  1411 ;; Return value:  Size  Location     Type
  1412 ;;                  1    wreg      void 
  1413 ;; Registers used:
  1414 ;;		wreg
  1415 ;; Tracked objects:
  1416 ;;		On entry : 0/0
  1417 ;;		On exit  : 0/0
  1418 ;;		Unchanged: 0/0
  1419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1420 ;;      Params:         0       0       0       0       0
  1421 ;;      Locals:         1       0       0       0       0
  1422 ;;      Temps:          0       0       0       0       0
  1423 ;;      Totals:         1       0       0       0       0
  1424 ;;Total ram usage:        1 bytes
  1425 ;; Hardware stack levels used: 1
  1426 ;; This function calls:
  1427 ;;		Nothing
  1428 ;; This function is called by:
  1429 ;;		_LCD_CMD
  1430 ;;		_LCD_Init
  1431 ;;		_LCD_Write_Char
  1432 ;; This function uses a non-reentrant model
  1433 ;;
  1434                           
  1435     0628                     _LCD_DATA:	
  1436                           ;psect for function _LCD_DATA
  1437                           
  1438                           
  1439                           ;incstack = 0
  1440                           ; Regs used in _LCD_DATA: [wreg]
  1441                           ;LCD_DATA@data stored from wreg
  1442     0628  00F0               	movwf	LCD_DATA@data
  1443     0629                     l779:
  1444                           
  1445                           ;lcd.c: 4: void LCD_DATA(unsigned char data);lcd.c: 5: {;lcd.c: 6:     if (data & 1)
  1446     0629  1C70               	btfss	LCD_DATA@data,0
  1447     062A  2E2C               	goto	u131
  1448     062B  2E2D               	goto	u130
  1449     062C                     u131:
  1450     062C  2E31               	goto	l37
  1451     062D                     u130:
  1452     062D                     l781:
  1453                           
  1454                           ;lcd.c: 7:         PORTBbits.RB0 = 1;
  1455     062D  1283               	bcf	3,5	;RP0=0, select bank0
  1456     062E  1303               	bcf	3,6	;RP1=0, select bank0
  1457     062F  1406               	bsf	6,0	;volatile
  1458     0630  2E34               	goto	l38
  1459     0631                     l37:	
  1460                           ;lcd.c: 8:     else PORTBbits.RB0 = 0;
  1461                           
  1462     0631  1283               	bcf	3,5	;RP0=0, select bank0
  1463     0632  1303               	bcf	3,6	;RP1=0, select bank0
  1464     0633  1006               	bcf	6,0	;volatile
  1465     0634                     l38:
  1466                           
  1467                           ;lcd.c: 9:      if (data & 2)
  1468     0634  1CF0               	btfss	LCD_DATA@data,1
  1469     0635  2E37               	goto	u141
  1470     0636  2E38               	goto	u140
  1471     0637                     u141:
  1472     0637  2E3A               	goto	l39
  1473     0638                     u140:
  1474     0638                     l783:
  1475                           
  1476                           ;lcd.c: 10:         PORTBbits.RB1 = 1;
  1477     0638  1486               	bsf	6,1	;volatile
  1478     0639  2E3B               	goto	l40
  1479     063A                     l39:	
  1480                           ;lcd.c: 11:     else PORTBbits.RB1 = 0;
  1481                           
  1482     063A  1086               	bcf	6,1	;volatile
  1483     063B                     l40:
  1484                           
  1485                           ;lcd.c: 12:      if (data & 4)
  1486     063B  1D70               	btfss	LCD_DATA@data,2
  1487     063C  2E3E               	goto	u151
  1488     063D  2E3F               	goto	u150
  1489     063E                     u151:
  1490     063E  2E41               	goto	l41
  1491     063F                     u150:
  1492     063F                     l785:
  1493                           
  1494                           ;lcd.c: 13:         PORTBbits.RB2 = 1;
  1495     063F  1506               	bsf	6,2	;volatile
  1496     0640  2E42               	goto	l42
  1497     0641                     l41:	
  1498                           ;lcd.c: 14:     else PORTBbits.RB2 = 0;
  1499                           
  1500     0641  1106               	bcf	6,2	;volatile
  1501     0642                     l42:
  1502                           
  1503                           ;lcd.c: 15:      if (data & 8)
  1504     0642  1DF0               	btfss	LCD_DATA@data,3
  1505     0643  2E45               	goto	u161
  1506     0644  2E46               	goto	u160
  1507     0645                     u161:
  1508     0645  2E48               	goto	l43
  1509     0646                     u160:
  1510     0646                     l787:
  1511                           
  1512                           ;lcd.c: 16:         PORTBbits.RB3 = 1;
  1513     0646  1586               	bsf	6,3	;volatile
  1514     0647  2E49               	goto	l45
  1515     0648                     l43:	
  1516                           ;lcd.c: 17:     else PORTBbits.RB3 = 0;
  1517                           
  1518     0648  1186               	bcf	6,3	;volatile
  1519     0649                     l45:
  1520     0649  0008               	return
  1521     064A                     __end_of_LCD_DATA:
  1522     0002                     ___latbits      equ	2
  1523     007E                     btemp           set	126	;btemp
  1524     007E                     wtemp0          set	126
  1525                           
  1526                           	psect	config
  1527                           
  1528                           ;Config register CONFIG @ 0x2007
  1529                           ;	Oscillator Selection bits
  1530                           ;	FOSC = HS, HS oscillator
  1531                           ;	Watchdog Timer Enable bit
  1532                           ;	WDTE = OFF, WDT disabled
  1533                           ;	Power-up Timer Enable bit
  1534                           ;	PWRTE = ON, PWRT enabled
  1535                           ;	FLASH Program Memory Code Protection bits
  1536                           ;	CP = OFF, Code protection off
  1537                           ;	Brown-out Reset Enable bit
  1538                           ;	BOREN = ON, BOR enabled
  1539                           ;	Low Voltage In-Circuit Serial Programming Enable bit
  1540                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  1541                           ;	Data EE Memory Code Protection
  1542                           ;	CPD = OFF, Code Protection off
  1543                           ;	FLASH Program Memory Write Enable
  1544                           ;	WRT = ON, Unprotected program memory may be written to by EECON control
  1545                           ;	In-Circuit Debugger Mode bit
  1546                           ;	DEBUG = 0x1, unprogrammed default
  1547     2007                     	org	8199
  1548     2007  3F72               	dw	16242

Data Sizes:
    Strings     15
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      13
    BANK0            80      4       4
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    LCD_Write_String@str	PTR unsigned char  size(1) Largest target is 9
		 -> STR_1(CODE[9]), STR_2(CODE[6]), 


Critical Paths under _main in COMMON

    _main->_LCD_Set_Cursor
    _LCD_Write_String->_LCD_Write_Char
    _LCD_Write_Char->_LCD_DATA
    _LCD_Set_Cursor->_LCD_CMD
    _LCD_SR->_LCD_CMD
    _LCD_SL->_LCD_CMD
    _LCD_Init->_LCD_CMD
    _LCD_Clear->_LCD_CMD
    _LCD_CMD->_LCD_DATA

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0    1534
                                             10 COMMON     3     3      0
                                              0 BANK0      4     4      0
                          _LCD_Clear
                           _LCD_Init
                             _LCD_SL
                             _LCD_SR
                     _LCD_Set_Cursor
                   _LCD_Write_String
 ---------------------------------------------------------------------------------
 (1) _LCD_Write_String                                     2     1      1     313
                                              6 COMMON     2     1      1
                     _LCD_Write_Char
 ---------------------------------------------------------------------------------
 (2) _LCD_Write_Char                                       5     5      0     221
                                              1 COMMON     5     5      0
                           _LCD_DATA
 ---------------------------------------------------------------------------------
 (1) _LCD_Set_Cursor                                       6     5      1     433
                                              4 COMMON     6     5      1
                            _LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _LCD_SR                                               0     0      0     145
                            _LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _LCD_SL                                               0     0      0     145
                            _LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             2     2      0     261
                                              4 COMMON     2     2      0
                            _LCD_CMD
                           _LCD_DATA
 ---------------------------------------------------------------------------------
 (1) _LCD_Clear                                            0     0      0     145
                            _LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _LCD_CMD                                              3     3      0     145
                                              1 COMMON     3     3      0
                           _LCD_DATA
 ---------------------------------------------------------------------------------
 (3) _LCD_DATA                                             1     1      0     116
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_Clear
     _LCD_CMD
       _LCD_DATA
   _LCD_Init
     _LCD_CMD
     _LCD_DATA
   _LCD_SL
     _LCD_CMD
   _LCD_SR
     _LCD_CMD
   _LCD_Set_Cursor
     _LCD_CMD
   _LCD_Write_String
     _LCD_Write_Char
       _LCD_DATA

Address spaces:
Name               Size   Autos  Total    Usage
BITCOMMON           14      0       0      0.0%
BITBANK0            80      0       0      0.0%
BITBANK1            80      0       0      0.0%
BITBANK3            96      0       0      0.0%
BITBANK2            96      0       0      0.0%
COMMON              14     13      13     92.9%
BANK0               80      4       4      5.0%
BANK1               80      0       0      0.0%
BANK3               96      0       0      0.0%
BANK2               96      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0      17      0.0%


Microchip Technology PIC Macro Assembler V3.00 build 20241204225717 
Symbol Table                                                                                   Sat Mar 22 12:12:35 2025

                       pc 0002                        l40 063B                        l41 0641  
                      l42 0642                        l43 0648                        l51 0779  
                      l60 05EE                        l45 0649                        l37 0631  
                      l38 0634                        l54 05FB                        l39 063A  
                      l63 0706                        l48 066C                        l57 0608  
                      l75 06B4                        l69 0627                        fsr 0004  
                     l801 06B6                       l811 06CD                       l803 06C0  
                     l901 05FC                       l821 06E8                       l813 06D0  
                     l805 06C2                       l831 070B                       l903 05EF  
                     l823 06EE                       l815 06D9                       l807 06C4  
                     l911 07A2                       l841 0729                       l833 070C  
                     l825 06FA                       l817 06DC                       l809 06C7  
                     l921 07B8                       l905 077A                       l851 0749  
                     l843 0732                       l835 0712                       l827 0707  
                     l819 06E5                       l931 07D1                       l923 07C0  
                     l907 078C                       l781 062D                       l861 0767  
                     l853 074F                       l845 0738                       l837 071A  
                     l829 070A                       l933 07DE                       l925 07CD  
                     l917 07A6                       l909 0793                       l783 0638  
                     l791 064E                       l863 076D                       l855 0755  
                     l847 073D                       l839 0723                       l871 0673  
                     l935 07E3                       l919 07B3                       l785 063F  
                     l793 0654                       l865 0773                       l857 075B  
                     l849 0743                       l873 0680                       l881 0691  
                     l937 07EB                       l787 0646                       l779 0629  
                     l795 0657                       l867 05E2                       l859 0761  
                     l891 06AE                       l883 0697                       l875 0682  
                     l797 0660                       l789 064B                       l885 06A4  
                     l877 0684                       l869 066E                       l893 0609  
                     l799 0663                       l887 06A6                       l879 068A  
                     l895 060B                       l889 06A8                       l897 0618  
                     l899 061A                       u200 0697                       u201 0696  
                     u130 062D                       u131 062C                       u140 0638  
                     u220 0627                       u141 0637                       u221 0626  
                     u150 063F                       u230 07CD                       u151 063E  
                     u215 069D                       u231 07CC                       u160 0646  
                     u240 07F8                       u161 0645                       u241 07F7  
                     u307 0701                       u235 07C9                       u180 0673  
                     u317 0716                       u181 0672                       u245 07F4  
                     u327 071E                       u175 06B9                       u337 072D  
                     u257 07AC                       u347 073A                       u195 0679  
                     u267 07D7                       u357 065B                       u277 06D4  
                     u367 0667                       u287 06E0                       u297 06F5  
                     fsr0 0004           __end_of_LCD_CMD 066D            _LCD_Set_Cursor 066D  
     LCD_Write_String@str 0076                      STR_1 0009                      STR_2 0012  
       ?_LCD_Write_String 0076                      _main 077A                      btemp 007E  
                    start 0000        ??_LCD_Write_String 0077          __end_of_LCD_DATA 064A  
        __end_of_LCD_Init 077A                     ?_main 0070                     _TRISB 0086  
  __end_of_LCD_Set_Cursor 06B5                     main@i 0020                     pclath 000A  
                   status 0003                     wtemp0 007E            _LCD_Write_Char 06B5  
         __initialization 07FC              __end_of_main 07FC                    ??_main 007A  
       __end_of_LCD_Clear 05EF                 ??_LCD_CMD 0071           ?_LCD_Set_Cursor 0074  
                  _LCD_SL 05EF                    _LCD_SR 05FC    __end_of_LCD_Write_Char 0707  
         LCD_Set_Cursor@c 0074           LCD_Set_Cursor@r 0076                 ?_LCD_DATA 0070  
 __end_of__initialization 07FC                 ?_LCD_Init 0070           ?_LCD_Write_Char 0070  
          __pcstackCOMMON 0070                   ?_LCD_SL 0070                   ?_LCD_SR 0070  
              ??_LCD_DATA 0070                ??_LCD_Init 0074                __pmaintext 077A  
                 _LCD_CMD 064A                __stringtab 0003          ??_LCD_Set_Cursor 0075  
                 __ptext1 0609                   __ptext2 06B5                   __ptext3 066D  
                 __ptext4 05FC                   __ptext5 05EF                   __ptext6 0707  
                 __ptext7 05E2                   __ptext8 064A                   __ptext9 0628  
               _LCD_Clear 05E2      end_of_initialization 07FC                 _PORTBbits 0006  
              LCD_CMD@cmd 0073                 _TRISBbits 0086                ?_LCD_Clear 0070  
       LCD_Write_String@i 0077          ??_LCD_Write_Char 0071            __end_of_LCD_SL 05FC  
          __end_of_LCD_SR 0609          _LCD_Write_String 0609       start_initialization 07FC  
                ??_LCD_SL 0074                  ??_LCD_SR 0074                  ?_LCD_CMD 0070  
               ___latbits 0002             __pcstackBANK0 0020               ??_LCD_Clear 0074  
               __pstrings 0003                  _LCD_DATA 0628                  _LCD_Init 0707  
             __stringbase 0008  __end_of_LCD_Write_String 0628       LCD_Write_Char@high4 0073  
      __end_of__stringtab 0009                  main@i_63 0022       LCD_Set_Cursor@high4 0077  
      LCD_Write_Char@data 0075        LCD_Write_Char@low4 0074                 stringcode 0003  
      LCD_Set_Cursor@low4 0078        LCD_Set_Cursor@temp 0079              LCD_DATA@data 0070  
                stringdir 0003                  stringtab 0003  
